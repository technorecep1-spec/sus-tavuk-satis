<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Paneli - Wyandotte TR</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <style>
        /* Admin Panel Specific Styles - Override main.css conflicts */
        .admin-container {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif !important;
        }
        
        .admin-container * {
            box-sizing: border-box;
        }
        
        .admin-container .btn {
            transition: all 0.2s ease;
        }
        
        .admin-container .nav-tab {
            transition: all 0.3s ease;
        }
        
        .admin-container .content-section {
            display: none;
            transition: opacity 0.3s ease, transform 0.3s ease;
        }
        
        .admin-container .content-section.active {
            display: block;
            opacity: 1;
            transform: translateY(0);
        }
        
        .admin-container .content-section:not(.active) {
            display: none;
        }
        
        /* Smooth tab transitions */
        .admin-container .nav-tab {
            position: relative;
            overflow: hidden;
        }
        
        .admin-container .nav-tab::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.1), transparent);
            transition: left 0.5s;
        }
        
        .admin-container .nav-tab:hover::before {
            left: 100%;
        }
        
        /* Loading states */
        .admin-container .loading {
            opacity: 0.6;
            pointer-events: none;
        }
        
        .admin-container .loading::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 20px;
            height: 20px;
            margin: -10px 0 0 -10px;
            border: 2px solid #f3f3f3;
            border-top: 2px solid #3498db;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
    <style>
        :root {
            --primary: #6366f1;
            --primary-dark: #4f46e5;
            --secondary: #8b5cf6;
            --success: #10b981;
            --warning: #f59e0b;
            --danger: #ef4444;
            --info: #06b6d4;
            --bg-primary: #0f172a;
            --bg-secondary: #1e293b;
            --bg-tertiary: #334155;
            --bg-card: #1e293b;
            --bg-glass: rgba(30, 41, 59, 0.8);
            --text-primary: #f8fafc;
            --text-secondary: #cbd5e1;
            --text-muted: #94a3b8;
            --border: rgba(148, 163, 184, 0.1);
            --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            --shadow-lg: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
            --shadow-xl: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, var(--bg-primary) 0%, var(--bg-secondary) 100%);
            color: var(--text-primary);
            line-height: 1.6;
            min-height: 100vh;
        }

        .admin-header {
            background: var(--bg-glass);
            backdrop-filter: blur(20px);
            border-bottom: 1px solid var(--border);
            padding: 1rem 1.5rem;
            position: sticky;
            top: 0;
            z-index: 1000;
        }
        
        .header-content {
            display: flex;
            align-items: center;
            justify-content: space-between;
            max-width: 1400px;
            margin: 0 auto;
        }
        
        .brand {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .brand-logo {
            width: 40px;
            height: 40px;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            border-radius: 0.75rem;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.25rem;
            font-weight: 700;
        }
        
        .brand-text h1 {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--text-primary);
            margin: 0;
        }
        
        .brand-text p {
            font-size: 0.875rem;
            color: var(--text-muted);
            margin: 0;
        }
        
        .header-actions {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .search-box {
            position: relative;
            width: 300px;
        }

        .search-box input {
            width: 100%;
            padding: 0.75rem 1rem 0.75rem 2.5rem;
            background: var(--bg-tertiary);
            border: 1px solid var(--border);
            border-radius: 0.75rem;
            color: var(--text-primary);
            font-size: 0.875rem;
            transition: all 0.3s ease;
        }
        
        .search-box input:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
        }
        
        .search-box i {
            position: absolute;
            left: 0.75rem;
            top: 50%;
            transform: translateY(-50%);
            color: var(--text-muted);
        }

        .action-buttons {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .action-btn {
            width: 40px;
            height: 40px;
            background: var(--bg-tertiary);
            border: 1px solid var(--border);
            border-radius: 0.75rem;
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--text-secondary);
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
        }
        
        .action-btn:hover {
            background: var(--primary);
            color: white;
            transform: translateY(-2px);
        }
        
        .notification-badge {
            position: absolute;
            top: -4px;
            right: -4px;
            background: var(--danger);
            color: white;
            font-size: 0.75rem;
            font-weight: 600;
            padding: 2px 6px;
            border-radius: 10px;
            min-width: 18px;
            text-align: center;
        }
        
        .user-profile {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            padding: 0.5rem 0.75rem;
            background: var(--bg-tertiary);
            border-radius: 0.75rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .user-profile:hover {
            background: var(--bg-card);
        }

        .user-avatar {
            width: 36px;
            height: 36px;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            border-radius: 0.75rem;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            font-size: 0.875rem;
        }
        
        .user-info {
            display: flex;
            flex-direction: column;
        }
        
        .user-name {
            font-size: 0.875rem;
            font-weight: 600;
            color: var(--text-primary);
        }
        
        .user-role {
            font-size: 0.75rem;
            color: var(--text-muted);
        }

        .admin-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 1.5rem;
        }

        .dashboard-stats {
            margin-bottom: 2rem;
        }

        .system-status-card {
            background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
            border-radius: 1.5rem;
            padding: 2rem;
            margin-bottom: 1.5rem;
            box-shadow: var(--shadow-xl);
            position: relative;
            overflow: hidden;
        }

        .system-status-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(45deg, rgba(255,255,255,0.1) 0%, transparent 50%);
            pointer-events: none;
        }

        .status-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .status-title {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            color: white;
        }

        .status-title i {
            font-size: 1.5rem;
            color: rgba(255, 255, 255, 0.8);
        }

        .status-title h3 {
            margin: 0;
            font-size: 1.5rem;
            font-weight: 700;
        }

        .status-indicator {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: white;
            font-weight: 600;
        }

        .pulse-dot {
            width: 12px;
            height: 12px;
            background: var(--success);
            border-radius: 50%;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { opacity: 1; transform: scale(1); }
            50% { opacity: 0.7; transform: scale(1.1); }
            100% { opacity: 1; transform: scale(1); }
        }

        .status-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
        }

        .status-item {
            display: flex;
            align-items: center;
            gap: 1rem;
            padding: 1rem;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 0.75rem;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .status-item.database {
            background: linear-gradient(135deg, var(--bg-primary) 0%, var(--bg-secondary) 100%);
            border: 1px solid rgba(255, 255, 255, 0.1);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            cursor: pointer;
        }

        .status-item.email {
            background: linear-gradient(135deg, var(--bg-primary) 0%, var(--bg-secondary) 100%);
            border: 1px solid rgba(255, 255, 255, 0.1);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            cursor: pointer;
        }

        .status-item.payment {
            background: linear-gradient(135deg, var(--bg-primary) 0%, var(--bg-secondary) 100%);
            border: 1px solid rgba(255, 255, 255, 0.1);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            cursor: pointer;
        }

        .status-item.server {
            background: linear-gradient(135deg, var(--bg-primary) 0%, var(--bg-secondary) 100%);
            border: 1px solid rgba(255, 255, 255, 0.1);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            cursor: pointer;
        }

        .status-item:hover {
            transform: translateY(-4px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
            border-color: rgba(255, 255, 255, 0.3);
        }

        .status-item.database:hover {
            background: linear-gradient(135deg, rgba(59, 130, 246, 0.1) 0%, var(--bg-secondary) 100%);
            border-color: rgba(59, 130, 246, 0.4);
        }

        .status-item.email:hover {
            background: linear-gradient(135deg, rgba(139, 92, 246, 0.1) 0%, var(--bg-secondary) 100%);
            border-color: rgba(139, 92, 246, 0.4);
        }

        .status-item.payment:hover {
            background: linear-gradient(135deg, rgba(245, 158, 11, 0.1) 0%, var(--bg-secondary) 100%);
            border-color: rgba(245, 158, 11, 0.4);
        }

        .status-item.server:hover {
            background: linear-gradient(135deg, rgba(16, 185, 129, 0.1) 0%, var(--bg-secondary) 100%);
            border-color: rgba(16, 185, 129, 0.4);
        }

        /* Kategori Badge Styles */
        .kategori-badge {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            border-radius: 2rem;
            font-size: 0.875rem;
            font-weight: 600;
            border: 1px solid;
            transition: all 0.3s ease;
        }

        .kategori-badge:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        }

        .kategori-icon {
            font-size: 1rem;
        }

        .kategori-text {
            text-transform: capitalize;
        }

        .kategori-tavuk {
            background: linear-gradient(135deg, rgba(16, 185, 129, 0.1), rgba(5, 150, 105, 0.1));
            border-color: rgba(16, 185, 129, 0.3);
            color: #10b981;
        }

        .kategori-horoz {
            background: linear-gradient(135deg, rgba(245, 158, 11, 0.1), rgba(217, 119, 6, 0.1));
            border-color: rgba(245, 158, 11, 0.3);
            color: #f59e0b;
        }

        .kategori-civciv {
            background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(37, 99, 235, 0.1));
            border-color: rgba(59, 130, 246, 0.3);
            color: #3b82f6;
        }

        .kategori-yumurta {
            background: linear-gradient(135deg, rgba(139, 92, 246, 0.1), rgba(124, 58, 237, 0.1));
            border-color: rgba(139, 92, 246, 0.3);
            color: #8b5cf6;
        }

        .kategori-genel {
            background: linear-gradient(135deg, rgba(148, 163, 184, 0.1), rgba(100, 116, 139, 0.1));
            border-color: rgba(148, 163, 184, 0.3);
            color: #94a3b8;
        }

        /* Modal Category Options */
        .category-option {
            padding: 1rem;
            background: var(--bg-tertiary);
            border: 2px solid var(--border);
            border-radius: 1rem;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 0.5rem;
        }

        .category-option:hover {
            border-color: var(--primary);
            background: var(--bg-secondary);
            transform: translateY(-2px);
        }

        .category-option.selected {
            border-color: var(--primary);
            background: linear-gradient(135deg, rgba(99, 102, 241, 0.1), rgba(139, 92, 246, 0.1));
            box-shadow: 0 4px 12px rgba(99, 102, 241, 0.2);
        }

        .category-option i {
            font-size: 2rem;
            color: var(--text-primary);
        }

        .category-option span {
            font-weight: 600;
            color: var(--text-primary);
            font-size: 0.9rem;
        }

        .category-option.selected i {
            color: var(--primary);
        }

        .category-option.selected span {
            color: var(--primary);
        }

        /* Modal Button Styles */
        .btn-secondary:hover {
            background: var(--bg-secondary) !important;
            border-color: var(--primary) !important;
            color: var(--primary) !important;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(99, 102, 241, 0.3);
        }

        .btn-primary:active {
            transform: translateY(0);
        }

        /* Status Badge Styles */
        .status-badge {
            display: inline-block;
            padding: 0.5rem 1rem;
            border-radius: 2rem;
            font-size: 0.875rem;
            font-weight: 600;
            text-transform: capitalize;
            transition: all 0.3s ease;
        }

        .status-beklemede {
            background: linear-gradient(135deg, rgba(245, 158, 11, 0.1), rgba(217, 119, 6, 0.1));
            color: #f59e0b;
            border: 1px solid rgba(245, 158, 11, 0.3);
        }

        .status-onaylandı {
            background: linear-gradient(135deg, rgba(16, 185, 129, 0.1), rgba(5, 150, 105, 0.1));
            color: #10b981;
            border: 1px solid rgba(16, 185, 129, 0.3);
        }

        .status-hazırlanıyor {
            background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(37, 99, 235, 0.1));
            color: #3b82f6;
            border: 1px solid rgba(59, 130, 246, 0.3);
        }

        .status-kargoda {
            background: linear-gradient(135deg, rgba(139, 92, 246, 0.1), rgba(124, 58, 237, 0.1));
            color: #8b5cf6;
            border: 1px solid rgba(139, 92, 246, 0.3);
        }

        .status-teslim-edildi {
            background: linear-gradient(135deg, rgba(16, 185, 129, 0.2), rgba(5, 150, 105, 0.2));
            color: #10b981;
            border: 1px solid rgba(16, 185, 129, 0.5);
        }

        .status-reddedildi {
            background: linear-gradient(135deg, rgba(239, 68, 68, 0.1), rgba(220, 38, 38, 0.1));
            color: #ef4444;
            border: 1px solid rgba(239, 68, 68, 0.3);
        }

        .status-icon {
            width: 40px;
            height: 40px;
            border-radius: 0.75rem;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
        }

        .status-icon.success {
            background: rgba(16, 185, 129, 0.2);
            color: var(--success);
        }

        .status-icon.warning {
            background: rgba(245, 158, 11, 0.2);
            color: var(--warning);
        }

        .status-icon.info {
            background: rgba(59, 130, 246, 0.2);
            color: #3b82f6;
        }

        .status-icon.purple {
            background: rgba(139, 92, 246, 0.2);
            color: #8b5cf6;
        }

        .status-icon.blue {
            background: rgba(6, 182, 212, 0.2);
            color: #06b6d4;
        }

        .status-info {
            display: flex;
            flex-direction: column;
            gap: 0.25rem;
        }

        .status-name {
            color: rgba(255, 255, 255, 0.8);
            font-size: 0.875rem;
            font-weight: 500;
        }

        .status-value {
            color: white;
            font-size: 1rem;
            font-weight: 700;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 1.5rem;
        }
        
        .stat-card {
            background: linear-gradient(145deg, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0.05) 100%);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 1.5rem;
            padding: 2rem;
            position: relative;
            overflow: hidden;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(20px);
        }
        
        .stat-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.4);
            border-color: rgba(255, 255, 255, 0.2);
        }
        
        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, var(--primary), var(--secondary));
        }
        
        .stat-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }
        
        .stat-icon {
            width: 50px;
            height: 50px;
            border-radius: 0.75rem;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            color: white;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }
        
        .stat-trend {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            border-radius: 0.75rem;
            font-size: 0.875rem;
            font-weight: 600;
        }
        
        .stat-trend.positive {
            background: rgba(16, 185, 129, 0.1);
            color: var(--success);
        }

        .stat-trend.negative {
            background: rgba(239, 68, 68, 0.1);
            color: var(--danger);
        }
        
        .stat-content {
            margin-bottom: 1.5rem;
        }
        
        .stat-number {
            font-size: 3rem;
            font-weight: 800;
            color: var(--text-primary);
            line-height: 1;
            margin-bottom: 0.5rem;
        }
        
        .stat-label {
            font-size: 1.125rem;
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 0.25rem;
        }
        
        .stat-subtitle {
            font-size: 0.875rem;
            color: var(--text-muted);
        }
        
        .stat-chart {
            position: absolute;
            bottom: 0;
            right: 0;
            width: 100px;
            height: 40px;
            opacity: 0.3;
        }

        .admin-nav {
            background: var(--bg-glass);
            backdrop-filter: blur(20px);
            border: 1px solid var(--border);
            border-radius: 1.5rem;
            margin-bottom: 1.5rem;
            overflow: hidden;
            box-shadow: var(--shadow);
        }
        
        .nav-tabs {
            display: flex;
            gap: 0.25rem;
            padding: 0.5rem;
        }
        
        .nav-tab {
            flex: 1;
            padding: 1rem 1.5rem;
            background: transparent;
            border: none;
            border-radius: 0.75rem;
            color: var(--text-secondary);
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.75rem;
            text-decoration: none;
        }

        .nav-tab:hover {
            background: var(--bg-tertiary);
            color: var(--text-primary);
        }

        .nav-tab.active {
            background: var(--primary);
            color: white;
            box-shadow: var(--shadow);
        }

        .nav-tab i {
            font-size: 1.25rem;
        }
        
        .nav-content {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
        }
        
        .nav-label {
            font-size: 1rem;
            font-weight: 600;
        }
        
        .nav-description {
            font-size: 0.75rem;
            opacity: 0.8;
        }
        

        .section-header {
            margin-bottom: 1.5rem;
        }

        .section-header h2 {
            font-size: 2rem;
            font-weight: 700;
            color: var(--text-primary);
            margin-bottom: 0.5rem;
        }

        .section-header p {
            color: var(--text-muted);
            font-size: 1.125rem;
        }

        .products-table-container {
            background: var(--bg-card);
            border: 1px solid var(--border);
            border-radius: 1.5rem;
            overflow: hidden;
            box-shadow: var(--shadow);
        }

        .products-table {
            width: 100%;
            border-collapse: collapse;
        }

        .products-table th {
            background: var(--bg-tertiary);
            padding: 1rem;
            text-align: left;
            font-weight: 600;
            color: var(--text-primary);
            border-bottom: 1px solid var(--border);
        }

        .products-table td {
            padding: 1rem;
            border-bottom: 1px solid var(--border);
            color: var(--text-secondary);
        }

        .products-table tr:hover {
            background: var(--bg-tertiary);
        }

        .btn {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.75rem 1rem;
            border: none;
            border-radius: 0.75rem;
            font-weight: 500;
            font-size: 0.875rem;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
        }

        .btn-primary {
            background: var(--primary);
            color: white;
        }

        .btn-primary:hover {
            background: var(--primary-dark);
            transform: translateY(-2px);
            box-shadow: var(--shadow-lg);
        }

        .btn-outline {
            background: transparent;
            color: var(--text-primary);
            border: 1px solid var(--border);
        }

        .btn-outline:hover {
            background: var(--bg-tertiary);
            border-color: var(--primary);
        }

        @media (max-width: 768px) {
            .header-content {
                flex-direction: column;
                gap: 1rem;
            }

            .search-box {
                width: 100%;
            }

            .stats-grid {
                grid-template-columns: 1fr;
                gap: 1rem;
            }

            .status-grid {
                grid-template-columns: 1fr;
            }

            .nav-tabs {
                flex-direction: column;
            }

            .stat-card {
                padding: 1.5rem;
            }

            .stat-number {
                font-size: 2.5rem;
            }
        }

        .notification {
            position: fixed;
            top: 1rem;
            right: 1rem;
            background: var(--bg-card);
            border: 1px solid var(--border);
            border-radius: 0.75rem;
            padding: 1rem;
            box-shadow: var(--shadow-xl);
            z-index: 10000;
            transform: translateX(100%);
            transition: transform 0.3s ease;
        }

        .notification.show {
            transform: translateX(0);
        }

        /* Modal Styles */
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(10px);
            z-index: 2000;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background: var(--bg-card);
            border-radius: 1rem;
            padding: 2rem;
            width: 90%;
            max-width: 500px;
            max-height: 90vh;
            overflow-y: auto;
            border: 1px solid var(--border);
            box-shadow: var(--shadow-xl);
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid var(--border);
        }

        .modal-header h3 {
            color: var(--text-primary);
            font-size: 1.5rem;
            font-weight: 600;
        }

        .close-btn {
            background: none;
            border: none;
            color: var(--text-muted);
            font-size: 1.5rem;
            cursor: pointer;
            padding: 0.5rem;
            border-radius: 0.5rem;
            transition: all 0.2s ease;
        }

        .close-btn:hover {
            background: var(--bg-tertiary);
            color: var(--text-primary);
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group label {
            display: block;
            color: var(--text-primary);
            font-weight: 500;
            margin-bottom: 0.5rem;
        }

        .form-group input,
        .form-group textarea {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid var(--border);
            border-radius: 0.5rem;
            background: var(--bg-tertiary);
            color: var(--text-primary);
            font-size: 1rem;
            transition: all 0.2s ease;
        }

        .form-group input:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
        }

        .checkbox-label {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            cursor: pointer;
        }

        .checkbox-label input[type="checkbox"] {
            width: auto;
            margin: 0;
        }

        .modal-actions {
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
            margin-top: 2rem;
            padding-top: 1rem;
            border-top: 1px solid var(--border);
        }

        .notification.success {
            border-left: 4px solid var(--success);
        }

        .notification.error {
            border-left: 4px solid var(--danger);
        }

        .notification.warning {
            border-left: 4px solid var(--warning);
        }

        .notification.info {
            border-left: 4px solid var(--info);
        }
    </style>
</head>
<body>
    <!-- Header -->
    <header class="admin-header">
        <div class="header-content">
            <div class="brand">
                <div class="brand-logo">
                <i class="bi bi-shield-check"></i>
            </div>
                    <div class="brand-text">
                        <h1>Admin Paneli</h1>
                        <p>Wyandotte TR Yönetim Sistemi</p>
                </div>
                </div>
                
            <div class="header-actions">
                <div class="search-box">
                        <i class="bi bi-search"></i>
                        <input type="text" placeholder="Hızlı arama..." id="globalSearch">
            </div>
            
                <div class="action-buttons">
                        <button class="action-btn" onclick="refreshDashboard()" title="Yenile">
                    <i class="bi bi-arrow-clockwise"></i>
                </button>
                        <button class="action-btn" onclick="toggleNotifications()" title="Bildirimler">
                            <i class="bi bi-bell"></i>
                            <span class="notification-badge">3</span>
                </button>
                    <button class="action-btn" onclick="toggleTheme()" title="Tema">
                            <i class="bi bi-moon"></i>
                        </button>
                    </div>
                    
                <div class="user-profile" onclick="toggleUserMenu()">
                    <div class="user-avatar">MU</div>
                        <div class="user-info">
                        <div class="user-name">mustafa.ozdemir.7</div>
                            <div class="user-role">Süper Admin</div>
                        </div>
                                <i class="bi bi-chevron-down"></i>
                </div>
            </div>
        </div>
    </header>

    <!-- Main Container -->
    <div class="admin-container">
        <!-- Dashboard Stats -->
        <div class="dashboard-stats">
            <!-- System Status Card -->
            <div class="system-status-card">
                <div class="status-header">
                    <div class="status-title">
                        <i class="bi bi-shield-check"></i>
                        <h3>Sistem Durumu</h3>
                    </div>
                    <div class="status-indicator">
                        <div class="pulse-dot"></div>
                        <span>Çevrimiçi</span>
                    </div>
                </div>
                <div class="status-grid">
                    <div class="status-item database">
                        <div class="status-icon success">
                            <i class="bi bi-database"></i>
                        </div>
                        <div class="status-info">
                            <span class="status-name">Veritabanı</span>
                            <span class="status-value">Çevrimiçi</span>
                        </div>
                    </div>
                    <div class="status-item email">
                        <div class="status-icon success">
                            <i class="bi bi-envelope"></i>
                        </div>
                        <div class="status-info">
                            <span class="status-name">E-posta</span>
                            <span class="status-value">Aktif</span>
                        </div>
                    </div>
                    <div class="status-item payment">
                        <div class="status-icon warning">
                            <i class="bi bi-credit-card"></i>
                        </div>
                        <div class="status-info">
                            <span class="status-name">Ödeme</span>
                            <span class="status-value">Bakım</span>
                        </div>
                    </div>
                    <div class="status-item server">
                        <div class="status-icon success">
                            <i class="bi bi-server"></i>
                        </div>
                        <div class="status-info">
                            <span class="status-name">Sunucu</span>
                            <span class="status-value">Normal</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Statistics Cards -->
            <div class="stats-grid">
                <div class="stat-card">
                <div class="stat-header">
                        <div class="stat-icon" style="background: linear-gradient(135deg, #f59e0b, #f97316);">
                    <i class="bi bi-clock-history"></i>
                    </div>
                        <div class="stat-trend positive">
                        <i class="bi bi-arrow-up"></i>
                        <span>+12%</span>
                    </div>
                </div>
                <div class="stat-content">
                        <div class="stat-number" id="pendingOrders">0</div>
                    <div class="stat-label">Bekleyen Siparişler</div>
                        <div class="stat-subtitle">Son 24 saatte</div>
                </div>
                <div class="stat-chart">
                        <canvas id="pendingOrdersChart" width="100" height="40"></canvas>
                </div>
            </div>

                <div class="stat-card">
                <div class="stat-header">
                        <div class="stat-icon" style="background: linear-gradient(135deg, #10b981, #059669);">
                    <i class="bi bi-box-seam"></i>
                    </div>
                        <div class="stat-trend positive">
                        <i class="bi bi-arrow-up"></i>
                        <span>+5%</span>
                    </div>
                </div>
                <div class="stat-content">
                        <div class="stat-number" id="totalProducts">3</div>
                    <div class="stat-label">Toplam Ürün</div>
                        <div class="stat-subtitle">Aktif ürünler</div>
                </div>
                <div class="stat-chart">
                        <canvas id="productsChart" width="100" height="40"></canvas>
                </div>
            </div>

                <div class="stat-card">
                <div class="stat-header">
                        <div class="stat-icon" style="background: linear-gradient(135deg, #3b82f6, #1d4ed8);">
                    <i class="bi bi-people"></i>
                    </div>
                        <div class="stat-trend positive">
                        <i class="bi bi-arrow-up"></i>
                        <span>+8%</span>
                    </div>
                </div>
                <div class="stat-content">
                        <div class="stat-number" id="registeredUsers">2</div>
                    <div class="stat-label">Kayıtlı Kullanıcı</div>
                        <div class="stat-subtitle">Toplam üye</div>
                </div>
                <div class="stat-chart">
                        <canvas id="usersChart" width="100" height="40"></canvas>
                </div>
            </div>

                <div class="stat-card">
                <div class="stat-header">
                        <div class="stat-icon" style="background: linear-gradient(135deg, #8b5cf6, #7c3aed);">
                    <i class="bi bi-envelope"></i>
                    </div>
                        <div class="stat-trend negative">
                        <i class="bi bi-arrow-down"></i>
                        <span>-3%</span>
                    </div>
                </div>
                <div class="stat-content">
                        <div class="stat-number" id="newMessages">0</div>
                    <div class="stat-label">Yeni Mesajlar</div>
                        <div class="stat-subtitle">Okunmamış</div>
                </div>
                <div class="stat-chart">
                        <canvas id="messagesChart" width="100" height="40"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Navigation -->
        <nav class="admin-nav">
                <div class="nav-tabs">
                <button class="nav-tab active" id="products-tab" onclick="switchTab('products')">
                        <i class="bi bi-box-seam"></i>
                       <div class="nav-content">
                           <span class="nav-label">Ürünler</span>
                           <span class="nav-description">Ürün Yönetimi</span>
                       </div>
                    </button>
                <button class="nav-tab" id="orders-tab" onclick="switchTab('orders')">
                        <i class="bi bi-cart-check"></i>
                       <div class="nav-content">
                           <span class="nav-label">Siparişler</span>
                        <span class="nav-description">Sipariş Yönetimi</span>
                       </div>
                    </button>
                <button class="nav-tab" id="messages-tab" onclick="switchTab('messages')">
                        <i class="bi bi-envelope"></i>
                       <div class="nav-content">
                           <span class="nav-label">Mesajlar</span>
                        <span class="nav-description">Mesaj Yönetimi</span>
                       </div>
                    </button>
                <button class="nav-tab" onclick="switchTab('users')">
                        <i class="bi bi-people"></i>
                       <div class="nav-content">
                           <span class="nav-label">Kullanıcılar</span>
                        <span class="nav-description">Kullanıcı Yönetimi</span>
                       </div>
                    </button>
                <button class="nav-tab" onclick="switchTab('gallery')">
                        <i class="bi bi-images"></i>
                       <div class="nav-content">
                           <span class="nav-label">Galeri</span>
                        <span class="nav-description">Galeri Yönetimi</span>
                       </div>
                    </button>
            </div>
        </nav>

        <!-- Content Sections -->
        <div class="content-section active" id="products">
                <div class="section-header">
                    <h2>Ürün Yönetimi</h2>
                    <p>Ürün ekleme, düzenleme ve yönetim işlemleri</p>
                <button class="btn btn-primary" onclick="showAddProductModal()" style="margin-top: 1rem;">
                            <i class="bi bi-plus-circle"></i>
                    <span>Yeni Ürün Ekle</span>
                        </button>
                </div>

                <div class="products-table-container">
                    <table class="products-table">
                        <thead>
                            <tr>
                                <th>Resim</th>
                            <th>Ürün Adı</th>
                            <th>Kategori</th>
                                <th>Fiyat</th>
                                <th>Stok</th>
                                <th>Durum</th>
                                <th>İşlemler</th>
                            </tr>
                        </thead>
                    <tbody>
                            <% if (urunler && urunler.length > 0) { %>
                            <% urunler.forEach(function(urun) { %>
                                <tr>
                                    <td>
                                        <% if (urun.resim) { %>
                                            <img src="<%= urun.resim %>" alt="<%= urun.isim %>" style="width: 50px; height: 50px; object-fit: cover; border-radius: 0.5rem;">
                                        <% } else { %>
                                            <div style="width: 50px; height: 50px; background: var(--bg-tertiary); border-radius: 0.5rem; display: flex; align-items: center; justify-content: center;">
                                                <i class="bi bi-image" style="color: var(--text-muted);"></i>
                                            </div>
                                                <% } %>
                                        </td>
                                    <td><%= urun.isim %></td>
                                    <td>
                                        <% 
                                            let kategori = urun.kategori || 'tavuk';
                                            let kategoriIcon = '';
                                            let kategoriClass = '';
                                            
                                            switch(kategori) {
                                                case 'tavuk':
                                                    kategoriIcon = '🥚';
                                                    kategoriClass = 'tavuk';
                                                    break;
                                                case 'horoz':
                                                    kategoriIcon = '🐓';
                                                    kategoriClass = 'horoz';
                                                    break;
                                                case 'civciv':
                                                    kategoriIcon = '🐥';
                                                    kategoriClass = 'civciv';
                                                    break;
                                                case 'yumurta':
                                                    kategoriIcon = '🥚';
                                                    kategoriClass = 'yumurta';
                                                    break;
                                                default:
                                                    kategoriIcon = '🏷️';
                                                    kategoriClass = 'genel';
                                            }
                                        %>
                                        <span class="kategori-badge kategori-<%= kategoriClass %>">
                                            <span class="kategori-icon"><%= kategoriIcon %></span>
                                            <span class="kategori-text"><%= kategori.charAt(0).toUpperCase() + kategori.slice(1) %></span>
                                        </span>
                                        </td>
                                    <td>₺<%= urun.fiyat %></td>
                                    <td><%= urun.stok %></td>
                                        <td>
                                            <% if (urun.stok > 10) { %>
                                            <span style="color: var(--success);">Aktif</span>
                                            <% } else if (urun.stok > 0) { %>
                                            <span style="color: var(--warning);">Düşük Stok</span>
                                            <% } else { %>
                                            <span style="color: var(--danger);">Stok Yok</span>
                                            <% } %>
                                        </td>
                                        <td>
                                        <button class="btn btn-outline edit-product-btn" data-product-id="<%= urun._id %>" style="padding: 0.5rem;" title="Düzenle">
                                                    <i class="bi bi-pencil"></i>
                                                </button>
                                        <button class="btn btn-outline delete-product-btn" data-product-id="<%= urun._id %>" style="padding: 0.5rem; margin-left: 0.5rem; color: var(--danger);" title="Sil">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                        </td>
                                    </tr>
                                <% }); %>
                            <% } else { %>
                                <tr>
                                <td colspan="7" style="text-align: center; padding: 2rem; color: var(--text-muted);">
                                    <i class="bi bi-inbox" style="font-size: 2rem; margin-bottom: 1rem; display: block;"></i>
                                    Henüz ürün eklenmemiş
                                    </td>
                                </tr>
                            <% } %>
                        </tbody>
                    </table>
                    </div>
                </div>

            <div class="content-section" id="orders">
                <div class="section-header">
                    <h2>Sipariş Yönetimi</h2>
                    <p>Sipariş takibi ve yönetim işlemleri</p>
                </div>

                <!-- Sipariş Filtreleri -->
                <div class="orders-filters" style="display: flex; gap: 1rem; margin-bottom: 2rem; flex-wrap: wrap;">
                    <div class="filter-group">
                        <label style="color: var(--text-muted); font-size: 0.9rem; margin-bottom: 0.5rem; display: block;">Durum Filtresi</label>
                        <select id="statusFilter" style="background: var(--bg-tertiary); border: 1px solid var(--border); border-radius: 0.75rem; padding: 0.75rem 1rem; color: var(--text-primary); min-width: 150px;">
                            <option value="">Tüm Siparişler</option>
                            <option value="Beklemede">Beklemede</option>
                            <option value="Onaylandı">Onaylandı</option>
                            <option value="Hazırlanıyor">Hazırlanıyor</option>
                            <option value="Kargoda">Kargoda</option>
                            <option value="Teslim Edildi">Teslim Edildi</option>
                            <option value="Reddedildi">Reddedildi</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <label style="color: var(--text-muted); font-size: 0.9rem; margin-bottom: 0.5rem; display: block;">Tarih Aralığı</label>
                        <select id="dateFilter" style="background: var(--bg-tertiary); border: 1px solid var(--border); border-radius: 0.75rem; padding: 0.75rem 1rem; color: var(--text-primary); min-width: 150px;">
                            <option value="">Tüm Zamanlar</option>
                            <option value="today">Bugün</option>
                            <option value="week">Bu Hafta</option>
                            <option value="month">Bu Ay</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <label style="color: var(--text-muted); font-size: 0.9rem; margin-bottom: 0.5rem; display: block;">Arama</label>
                        <input type="text" id="searchOrders" placeholder="Sipariş ID, müşteri veya ürün ara..." style="background: var(--bg-tertiary); border: 1px solid var(--border); border-radius: 0.75rem; padding: 0.75rem 1rem; color: var(--text-primary); min-width: 250px;">
                    </div>
                </div>

                <!-- Sipariş İstatistikleri -->
                <div class="orders-stats" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1rem; margin-bottom: 2rem;">
                    <div class="stat-card" style="background: var(--bg-glass); backdrop-filter: blur(10px); border-radius: 1rem; padding: 1.5rem; border: 1px solid var(--border); text-align: center;">
                        <div style="color: var(--warning); font-size: 2rem; margin-bottom: 0.5rem;">⏳</div>
                        <div style="color: var(--text-primary); font-size: 1.5rem; font-weight: 700; margin-bottom: 0.25rem;" id="pendingCount"><%= pendingOrderCount %></div>
                        <div style="color: var(--text-muted); font-size: 0.9rem;">Bekleyen Siparişler</div>
                    </div>
                    <div class="stat-card" style="background: var(--bg-glass); backdrop-filter: blur(10px); border-radius: 1rem; padding: 1.5rem; border: 1px solid var(--border); text-align: center;">
                        <div style="color: var(--success); font-size: 2rem; margin-bottom: 0.5rem;">✅</div>
                        <div style="color: var(--text-primary); font-size: 1.5rem; font-weight: 700; margin-bottom: 0.25rem;" id="completedCount">0</div>
                        <div style="color: var(--text-muted); font-size: 0.9rem;">Tamamlanan</div>
                    </div>
                    <div class="stat-card" style="background: var(--bg-glass); backdrop-filter: blur(10px); border-radius: 1rem; padding: 1.5rem; border: 1px solid var(--border); text-align: center;">
                        <div style="color: var(--primary); font-size: 2rem; margin-bottom: 0.5rem;">💰</div>
                        <div style="color: var(--text-primary); font-size: 1.5rem; font-weight: 700; margin-bottom: 0.25rem;" id="totalRevenue">₺0</div>
                        <div style="color: var(--text-muted); font-size: 0.9rem;">Toplam Gelir</div>
                    </div>
                    <div class="stat-card" style="background: var(--bg-glass); backdrop-filter: blur(10px); border-radius: 1rem; padding: 1.5rem; border: 1px solid var(--border); text-align: center;">
                        <div style="color: var(--info); font-size: 2rem; margin-bottom: 0.5rem;">📦</div>
                        <div style="color: var(--text-primary); font-size: 1.5rem; font-weight: 700; margin-bottom: 0.25rem;" id="totalOrders"><%= siparisler ? siparisler.length : 0 %></div>
                        <div style="color: var(--text-muted); font-size: 0.9rem;">Toplam Sipariş</div>
                    </div>
                </div>

                <!-- Siparişler Tablosu -->
                <div class="orders-table-container" style="background: var(--bg-glass); backdrop-filter: blur(10px); border-radius: 1.5rem; border: 1px solid var(--border); overflow: hidden;">
                    <div class="table-header" style="padding: 1.5rem; border-bottom: 1px solid var(--border); display: flex; justify-content: space-between; align-items: center;">
                        <h3 style="color: var(--text-primary); margin: 0;">Siparişler</h3>
                        <button onclick="refreshOrders()" style="background: var(--primary); color: white; border: none; padding: 0.5rem 1rem; border-radius: 0.5rem; cursor: pointer; display: flex; align-items: center; gap: 0.5rem;">
                            <i class="bi bi-arrow-clockwise"></i>
                            Yenile
                        </button>
                    </div>
                    
                    <div class="orders-table" style="overflow-x: auto;">
                        <table style="width: 100%; border-collapse: collapse;">
                            <thead style="background: linear-gradient(135deg, var(--bg-tertiary), var(--bg-secondary));">
                                <tr>
                                    <th style="padding: 1.25rem 1rem; text-align: left; color: var(--text-primary); font-weight: 700; border-bottom: 2px solid var(--primary); font-size: 0.9rem; text-transform: uppercase; letter-spacing: 0.5px;">Sipariş No</th>
                                    <th style="padding: 1.25rem 1rem; text-align: left; color: var(--text-primary); font-weight: 700; border-bottom: 2px solid var(--primary); font-size: 0.9rem; text-transform: uppercase; letter-spacing: 0.5px;">Müşteri</th>
                                    <th style="padding: 1.25rem 1rem; text-align: left; color: var(--text-primary); font-weight: 700; border-bottom: 2px solid var(--primary); font-size: 0.9rem; text-transform: uppercase; letter-spacing: 0.5px;">Ürünler</th>
                                    <th style="padding: 1.25rem 1rem; text-align: left; color: var(--text-primary); font-weight: 700; border-bottom: 2px solid var(--primary); font-size: 0.9rem; text-transform: uppercase; letter-spacing: 0.5px;">Tutar</th>
                                    <th style="padding: 1.25rem 1rem; text-align: left; color: var(--text-primary); font-weight: 700; border-bottom: 2px solid var(--primary); font-size: 0.9rem; text-transform: uppercase; letter-spacing: 0.5px;">Durum</th>
                                    <th style="padding: 1.25rem 1rem; text-align: left; color: var(--text-primary); font-weight: 700; border-bottom: 2px solid var(--primary); font-size: 0.9rem; text-transform: uppercase; letter-spacing: 0.5px;">Tarih</th>
                                    <th style="padding: 1.25rem 1rem; text-align: center; color: var(--text-primary); font-weight: 700; border-bottom: 2px solid var(--primary); font-size: 0.9rem; text-transform: uppercase; letter-spacing: 0.5px;">İşlemler</th>
                                </tr>
                            </thead>
                            <tbody id="ordersTableBody">
                                <% if (siparisler && siparisler.length > 0) { %>
                                <% siparisler.forEach(function(siparis, index) { %>
                                <% const orderNumber = index + 1; %>
                                <tr style="border-bottom: 1px solid var(--border); transition: all 0.3s ease; background: var(--bg-card);">
                                    <td style="padding: 1rem; color: var(--text-primary); font-weight: 600;">
                                        <div style="display: flex; align-items: center; justify-content: flex-start;">
                                            <span style="font-size: 1.2rem; font-weight: 700; color: var(--primary); background: linear-gradient(135deg, var(--primary), #6366f1); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text;">
                                                #<%= orderNumber.toString().padStart(4, '0') %>
                                            </span>
                                        </div>
                                    </td>
                                    <td style="padding: 1rem; color: var(--text-primary);">
                                        <div style="display: flex; flex-direction: column; gap: 0.25rem;">
                                            <span style="font-weight: 500;"><%= siparis.user ? siparis.user.email : 'Misafir' %></span>
                                        </div>
                                    </td>
                                    <td style="padding: 1rem; color: var(--text-primary);">
                                        <div style="max-width: 250px; max-height: 80px; overflow-y: auto; font-size: 0.875rem; line-height: 1.4;">
                                            <% if (siparis.products && siparis.products.length > 0) { %>
                                                <% siparis.products.forEach(function(item) { %>
                                                <div style="margin-bottom: 0.25rem;">
                                                    <% if (item.product && item.product.isim) { %>
                                                        <%= item.product.isim %> 
                                                        <span style="color: var(--text-muted);">(<%= item.quantity || 1 %>x)</span>
                                                        <% if (item.product.fiyat) { %>
                                                            - ₺<%= item.product.fiyat %>
                                                        <% } %>
                                                    <% } else { %>
                                                        <span style="color: var(--text-muted); font-style: italic;">Silinmiş Ürün (<%= item.quantity || 1 %>x)</span>
                                                    <% } %>
                                                </div>
                                                <% }); %>
                                            <% } else { %>
                                                <span style="color: var(--text-muted); font-style: italic;">Ürün bilgisi yok</span>
                                            <% } %>
                                        </div>
                                    </td>
                                    <td style="padding: 1rem; color: var(--text-primary); font-weight: 600;">
                                        <div style="display: flex; flex-direction: column; gap: 0.25rem; align-items: flex-start;">
                                            <span style="font-size: 1.1rem; color: var(--success);">₺<%= siparis.total || 0 %></span>
                                        </div>
                                    </td>
                                    <td style="padding: 1rem;">
                                        <div style="display: flex; flex-direction: column; gap: 0.25rem; align-items: flex-start;">
                                            <span class="status-badge status-<%= siparis.status.toLowerCase().replace(/\s+/g, '-') %>" style="
                                                padding: 0.5rem 1rem; 
                                                border-radius: 2rem; 
                                                font-size: 0.875rem; 
                                                font-weight: 600; 
                                                text-transform: capitalize;
                                                display: inline-block;
                                                transition: all 0.3s ease;
                                                cursor: pointer;
                                                position: relative;
                                                background: linear-gradient(135deg, 
                                                    <% if (siparis.status === 'Beklemede') { %>#f59e0b, #d97706<% } else if (siparis.status === 'Onaylandı') { %>#10b981, #059669<% } else if (siparis.status === 'Kargoda') { %>#06b6d4, #0891b2<% } else if (siparis.status === 'Teslim Edildi') { %>#6366f1, #4f46e5<% } else if (siparis.status === 'Reddedildi') { %>#ef4444, #dc2626<% } else { %>#6b7280, #4b5563<% } %>
                                                ); 
                                                color: white; 
                                                box-shadow: 0 2px 4px rgba(0,0,0,0.2);
                                            " onmouseover="this.style.transform='scale(1.05)'" onmouseout="this.style.transform='scale(1)'">
                                                <i class="bi <% if (siparis.status === 'Beklemede') { %>bi-clock<% } else if (siparis.status === 'Onaylandı') { %>bi-check-circle<% } else if (siparis.status === 'Kargoda') { %>bi-truck<% } else if (siparis.status === 'Teslim Edildi') { %>bi-house-check<% } else if (siparis.status === 'Reddedildi') { %>bi-x-circle<% } else { %>bi-question-circle<% } %>" style="margin-right: 0.5rem;"></i>
                                                <%= siparis.status %>
                                            </span>
                                        </div>
                                    </td>
                                    <td style="padding: 1rem; color: var(--text-primary);">
                                        <div style="display: flex; flex-direction: column; gap: 0.5rem; align-items: flex-start;">
                                            <div style="display: flex; flex-direction: column; gap: 0.25rem;">
                                                <span style="font-size: 1rem; font-weight: 700; color: var(--text-primary);">
                                                    <%= new Date(siparis.createdAt).toLocaleDateString('tr-TR', {
                                                        day: '2-digit',
                                                        month: '2-digit', 
                                                        year: 'numeric'
                                                    }) %>
                                                </span>
                                                <span style="font-size: 0.85rem; color: var(--text-muted); font-weight: 500;">
                                                    <%= new Date(siparis.createdAt).toLocaleDateString('tr-TR', {
                                                        weekday: 'long'
                                                    }) %>
                                                </span>
                                            </div>
                                            <div style="display: flex; align-items: center; gap: 0.5rem; background: linear-gradient(135deg, var(--bg-tertiary), var(--bg-secondary)); padding: 0.5rem 0.75rem; border-radius: 0.5rem; border: 1px solid var(--border);">
                                                <i class="bi bi-clock" style="font-size: 0.8rem; color: var(--primary);"></i>
                                                <span style="font-size: 0.9rem; color: var(--text-primary); font-weight: 600;">
                                                    <%= new Date(siparis.createdAt).toLocaleTimeString('tr-TR', {
                                                        hour: '2-digit', 
                                                        minute: '2-digit',
                                                        second: '2-digit'
                                                    }) %>
                                                </span>
                                            </div>
                                        </div>
                                    </td>
                                    <td style="padding: 1rem;">
                                        <div style="display: flex; justify-content: center; align-items: center;">
                                            <button onclick="viewOrder('<%= siparis._id %>')" style="
                                                padding: 0.75rem 1.5rem; 
                                                background: linear-gradient(135deg, #10b981, #059669); 
                                                color: white; 
                                                border: none; 
                                                border-radius: 0.75rem; 
                                                cursor: pointer; 
                                                display: flex; 
                                                align-items: center; 
                                                gap: 0.75rem;
                                                font-size: 0.9rem;
                                                font-weight: 600;
                                                transition: all 0.3s ease;
                                                box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
                                                min-width: 100px;
                                                justify-content: center;
                                            " onmouseover="this.style.transform='translateY(-3px) scale(1.05)'; this.style.boxShadow='0 8px 20px rgba(16, 185, 129, 0.4)'" onmouseout="this.style.transform='translateY(0) scale(1)'; this.style.boxShadow='0 4px 12px rgba(16, 185, 129, 0.3)'">
                                                <i class="bi bi-eye-fill" style="font-size: 1rem;"></i>
                                                <span>Detay</span>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                                <% }); %>
                                <% } else { %>
                                <tr>
                                    <td colspan="7" style="padding: 3rem; text-align: center; color: var(--text-muted);">
                                        <i class="bi bi-cart-x" style="font-size: 3rem; margin-bottom: 1rem; display: block;"></i>
                                        <h3>Henüz sipariş bulunmuyor</h3>
                                        <p>Müşteriler sipariş verdiğinde burada görünecek.</p>
                                    </td>
                                </tr>
                                <% } %>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <div class="content-section" id="messages">
                <div class="section-header">
                    <h2>Mesaj Yönetimi</h2>
                    <p>Müşteri mesajları ve iletişim yönetimi</p>
                </div>

                <!-- Mesaj İstatistikleri - Kompakt Tasarım -->
                <div class="row g-3 mb-4">
                    <div class="col-md-3">
                        <div class="card border-0" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white;">
                            <div class="card-body text-center py-3">
                                <i class="bi bi-envelope fs-4 mb-2"></i>
                                <h4 class="mb-1" id="totalMessages">0</h4>
                                <small>Toplam Mesaj</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card border-0" style="background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); color: white;">
                            <div class="card-body text-center py-3">
                                <i class="bi bi-envelope-open fs-4 mb-2"></i>
                                <h4 class="mb-1" id="unreadMessages">0</h4>
                                <small>Okunmamış</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card border-0" style="background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%); color: white;">
                            <div class="card-body text-center py-3">
                                <i class="bi bi-reply fs-4 mb-2"></i>
                                <h4 class="mb-1" id="repliedMessages">0</h4>
                                <small>Yanıtlanan</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card border-0" style="background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%); color: white;">
                            <div class="card-body text-center py-3">
                                <i class="bi bi-clock fs-4 mb-2"></i>
                                <h4 class="mb-1" id="todayMessages">0</h4>
                                <small>Bugünkü</small>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Filtreler ve Arama - Kompakt Tasarım -->
                <div class="card border-0 mb-3" style="background: var(--bg-glass); backdrop-filter: blur(10px);">
                    <div class="card-body py-3">
                        <div class="row g-2 align-items-end">
                            <div class="col-md-3">
                                <label class="form-label small mb-1" style="color: var(--text-primary); font-weight: 600;">Durum:</label>
                                <select id="messageStatusFilter" class="form-select form-select-sm" style="background: var(--bg-tertiary); border: 1px solid var(--border); color: var(--text-primary);">
                                    <option value="">Tümü</option>
                                    <option value="unread">Okunmamış</option>
                                    <option value="read">Okunmuş</option>
                                    <option value="replied">Yanıtlanmış</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label small mb-1" style="color: var(--text-primary); font-weight: 600;">Tarih:</label>
                                <select id="messageDateFilter" class="form-select form-select-sm" style="background: var(--bg-tertiary); border: 1px solid var(--border); color: var(--text-primary);">
                                    <option value="">Tümü</option>
                                    <option value="today">Bugün</option>
                                    <option value="week">Bu Hafta</option>
                                    <option value="month">Bu Ay</option>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label small mb-1" style="color: var(--text-primary); font-weight: 600;">Arama:</label>
                                <input type="text" id="messageSearch" class="form-control form-control-sm" placeholder="İsim, e-posta veya konu ara..." style="background: var(--bg-tertiary); border: 1px solid var(--border); color: var(--text-primary);">
                            </div>
                            <div class="col-md-2">
                                <div class="d-flex gap-1">
                                    <button onclick="addTestMessages()" class="btn btn-info btn-sm" title="Test Mesajları Ekle">
                                        <i class="bi bi-plus-circle"></i>
                                    </button>
                                    <button onclick="refreshMessages()" class="btn btn-primary btn-sm" title="Yenile">
                                        <i class="bi bi-arrow-clockwise"></i>
                                    </button>
                                    <button onclick="markAllAsRead()" class="btn btn-success btn-sm" title="Tümünü Okundu İşaretle">
                                        <i class="bi bi-check-all"></i>
                                    </button>
                                    <button onclick="deleteSelectedMessages()" class="btn btn-danger btn-sm" title="Seçilenleri Sil">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Mesaj Listesi - Kompakt Tasarım -->
                <div class="card border-0" style="background: var(--bg-glass); backdrop-filter: blur(10px);">
                    <div class="card-header border-0 py-3" style="background: transparent;">
                        <div class="d-flex justify-content-between align-items-center">
                            <h6 class="mb-0" style="color: var(--text-primary);">
                                <i class="bi bi-list-ul me-2"></i>
                                Mesaj Listesi
                            </h6>
                            <div class="d-flex align-items-center gap-2">
                                <input type="checkbox" id="selectAllMessages" onchange="toggleSelectAllMessages()" class="form-check-input">
                                <label for="selectAllMessages" class="form-check-label small" style="color: var(--text-muted);">Tümünü Seç</label>
                            </div>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead style="background: var(--bg-tertiary);">
                                    <tr>
                                        <th style="border: none; color: var(--text-primary); width: 40px;">
                                            <input type="checkbox" id="selectAllMessages2" onchange="toggleSelectAllMessages()" class="form-check-input">
                                        </th>
                                        <th style="border: none; color: var(--text-primary);">Gönderen</th>
                                        <th style="border: none; color: var(--text-primary);">Konu</th>
                                        <th style="border: none; color: var(--text-primary); width: 120px;">Tarih</th>
                                        <th style="border: none; color: var(--text-primary); width: 100px;">Durum</th>
                                        <th style="border: none; color: var(--text-primary); width: 120px;">İşlemler</th>
                                    </tr>
                                </thead>
                                <tbody id="messagesTableBody">
                                    <!-- Mesajlar buraya dinamik olarak yüklenecek -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <div class="content-section" id="users">
                <div class="section-header">
                    <h2>Kullanıcı Yönetimi</h2>
                    <p>Kullanıcı hesapları ve yetki yönetimi</p>
                </div>

                <!-- Kullanıcı İstatistikleri -->
                <div class="users-stats" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1rem; margin-bottom: 2rem;">
                    <div class="stat-card" style="background: var(--bg-card); border: 1px solid var(--border); border-radius: 1rem; padding: 1.5rem; text-align: center; transition: all 0.3s ease;">
                        <div style="color: var(--primary); font-size: 2rem; margin-bottom: 0.5rem;">
                            <i class="bi bi-people-fill"></i>
                        </div>
                        <div class="stat-number" id="totalUsers">0</div>
                        <div class="stat-label">Toplam Kullanıcı</div>
                    </div>
                    <div class="stat-card" style="background: var(--bg-card); border: 1px solid var(--border); border-radius: 1rem; padding: 1.5rem; text-align: center; transition: all 0.3s ease;">
                        <div style="color: var(--success); font-size: 2rem; margin-bottom: 0.5rem;">
                            <i class="bi bi-person-check-fill"></i>
                        </div>
                        <div class="stat-number" id="activeUsers">0</div>
                        <div class="stat-label">Doğrulanmış Kullanıcı</div>
                    </div>
                    <div class="stat-card" style="background: var(--bg-card); border: 1px solid var(--border); border-radius: 1rem; padding: 1.5rem; text-align: center; transition: all 0.3s ease;">
                        <div style="color: var(--warning); font-size: 2rem; margin-bottom: 0.5rem;">
                            <i class="bi bi-clock-fill"></i>
                        </div>
                        <div class="stat-number" id="inactiveUsers">0</div>
                        <div class="stat-label">Beklemede</div>
                    </div>
                    <div class="stat-card" style="background: var(--bg-card); border: 1px solid var(--border); border-radius: 1rem; padding: 1.5rem; text-align: center; transition: all 0.3s ease;">
                        <div style="color: var(--info); font-size: 2rem; margin-bottom: 0.5rem;">
                            <i class="bi bi-calendar-event"></i>
                        </div>
                        <div class="stat-number" id="newUsersToday">0</div>
                        <div class="stat-label">Bugün Kayıt</div>
                    </div>
                </div>

                <!-- Filtreler ve Arama -->
                <div class="users-filters" style="display: flex; gap: 1rem; margin-bottom: 2rem; flex-wrap: wrap; align-items: end;">
                    <div class="filter-group">
                        <label style="color: var(--text-muted); font-size: 0.9rem; margin-bottom: 0.5rem; display: block;">Durum Filtresi</label>
                        <select id="userStatusFilter" style="background: var(--bg-tertiary); border: 1px solid var(--border); border-radius: 0.75rem; padding: 0.75rem 1rem; color: var(--text-primary); min-width: 150px;">
                            <option value="">Tüm Kullanıcılar</option>
                            <option value="active">Doğrulanmış</option>
                            <option value="inactive">Beklemede</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <label style="color: var(--text-muted); font-size: 0.9rem; margin-bottom: 0.5rem; display: block;">Kayıt Tarihi</label>
                        <select id="userDateFilter" style="background: var(--bg-tertiary); border: 1px solid var(--border); border-radius: 0.75rem; padding: 0.75rem 1rem; color: var(--text-primary); min-width: 150px;">
                            <option value="">Tüm Zamanlar</option>
                            <option value="today">Bugün</option>
                            <option value="week">Bu Hafta</option>
                            <option value="month">Bu Ay</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <label style="color: var(--text-muted); font-size: 0.9rem; margin-bottom: 0.5rem; display: block;">Arama</label>
                        <input type="text" id="searchUsers" placeholder="Email, isim veya telefon ara..." style="background: var(--bg-tertiary); border: 1px solid var(--border); border-radius: 0.75rem; padding: 0.75rem 1rem; color: var(--text-primary); min-width: 250px;">
                    </div>
                    <div class="filter-group">
                        <button onclick="refreshUsers()" style="background: linear-gradient(135deg, var(--primary), #6366f1); color: white; border: none; border-radius: 0.75rem; padding: 0.75rem 1.5rem; cursor: pointer; display: flex; align-items: center; gap: 0.5rem; font-weight: 600; transition: all 0.3s ease;" onmouseover="this.style.transform='translateY(-2px)'" onmouseout="this.style.transform='translateY(0)'">
                            <i class="bi bi-arrow-clockwise"></i>
                            Yenile
                        </button>
                    </div>
                </div>

                <!-- Kullanıcılar Tablosu -->
                <div class="users-table" style="overflow-x: auto;">
                    <table style="width: 100%; border-collapse: collapse;">
                        <thead style="background: linear-gradient(135deg, var(--bg-tertiary), var(--bg-secondary));">
                            <tr>
                                <th style="padding: 1.25rem 1rem; text-align: left; color: var(--text-primary); font-weight: 700; border-bottom: 2px solid var(--primary); font-size: 0.9rem; text-transform: uppercase; letter-spacing: 0.5px;">Kullanıcı</th>
                                <th style="padding: 1.25rem 1rem; text-align: left; color: var(--text-primary); font-weight: 700; border-bottom: 2px solid var(--primary); font-size: 0.9rem; text-transform: uppercase; letter-spacing: 0.5px;">İletişim</th>
                                <th style="padding: 1.25rem 1rem; text-align: left; color: var(--text-primary); font-weight: 700; border-bottom: 2px solid var(--primary); font-size: 0.9rem; text-transform: uppercase; letter-spacing: 0.5px;">Kayıt Tarihi</th>
                                <th style="padding: 1.25rem 1rem; text-align: left; color: var(--text-primary); font-weight: 700; border-bottom: 2px solid var(--primary); font-size: 0.9rem; text-transform: uppercase; letter-spacing: 0.5px;">Durum</th>
                                <th style="padding: 1.25rem 1rem; text-align: left; color: var(--text-primary); font-weight: 700; border-bottom: 2px solid var(--primary); font-size: 0.9rem; text-transform: uppercase; letter-spacing: 0.5px;">Siparişler</th>
                                <th style="padding: 1.25rem 1rem; text-align: center; color: var(--text-primary); font-weight: 700; border-bottom: 2px solid var(--primary); font-size: 0.9rem; text-transform: uppercase; letter-spacing: 0.5px;">İşlemler</th>
                            </tr>
                        </thead>
                        <tbody id="usersTableBody">
                            <tr>
                                <td colspan="6" style="padding: 3rem; text-align: center; color: var(--text-muted);">
                                    <i class="bi bi-people" style="font-size: 3rem; margin-bottom: 1rem; display: block;"></i>
                                    Kullanıcılar yükleniyor...
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="content-section" id="gallery">
                <div class="section-header">
                    <h2>Galeri Yönetimi</h2>
                <p>Galeri resimleri ve medya yönetimi</p>
                </div>
            <div style="background: var(--bg-card); border: 1px solid var(--border); border-radius: 1.5rem; padding: 2rem; text-align: center;">
                <i class="bi bi-images" style="font-size: 3rem; color: var(--text-muted); margin-bottom: 1rem;"></i>
                <h3 style="color: var(--text-primary); margin-bottom: 0.5rem;">Galeri Yönetimi</h3>
                <p style="color: var(--text-muted);">Galeri yönetimi bölümü yakında eklenecek.</p>
                    </div>
                    </div>
                </div>

    <!-- Notification Container -->
    <div id="notificationContainer">    </div>

    <!-- Add Product Modal -->
    <div id="addProductModal" class="modal" style="display: none;">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Yeni Ürün Ekle</h3>
                <button class="close-btn" onclick="closeAddProductModal()">&times;</button>
                </div>
            <form id="addProductForm">
                <div class="form-group">
                    <label for="productName">Ürün Adı</label>
                    <input type="text" id="productName" name="isim" required>
                </div>
                <div class="form-group">
                    <label for="productDescription">Açıklama</label>
                    <textarea id="productDescription" name="aciklama" rows="3" required></textarea>
                </div>
                <div class="form-group">
                    <label for="productPrice">Fiyat (₺)</label>
                    <input type="number" id="productPrice" name="fiyat" required>
                    </div>
                <div class="form-group">
                    <label for="productImage">Resim URL</label>
                    <input type="url" id="productImage" name="resim" placeholder="https://example.com/image.jpg">
                    </div>
                <div class="form-group">
                    <label for="productStock">Stok Miktarı</label>
                    <input type="number" id="productStock" name="stok" required>
                </div>
                <div class="form-group">
                    <label class="checkbox-label">
                        <input type="checkbox" id="productFeatured" name="isFeaturedAdd">
                        <span>Öne Çıkan Ürün</span>
                    </label>
                    </div>
                <div class="modal-actions">
                    <button type="button" class="btn btn-outline" onclick="closeAddProductModal()">İptal</button>
                    <button type="submit" class="btn btn-primary">Ürün Ekle</button>
                    </div>
            </form>
    </div>
    </div>

    <!-- Edit Product Modal -->
    <div id="editProductModal" class="modal" style="display: none;">
        <div class="modal-content" style="max-width: 800px; max-height: 90vh; overflow-y: auto;">
            <div class="modal-header">
                <h3>Ürünü Düzenle</h3>
                <button class="close-btn" onclick="closeEditProductModal()">&times;</button>
            </div>
            <form id="editProductForm">
                <input type="hidden" id="editProductId" name="productId">
                
                <!-- Ürün İstatistikleri -->
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 1rem; margin-bottom: 2rem;">
                    <div style="background: var(--bg-card); padding: 1rem; border-radius: 1rem; text-align: center; border: 1px solid var(--border);">
                        <div style="color: var(--primary); font-size: 1.5rem; margin-bottom: 0.5rem;">₺</div>
                        <div id="editCurrentPrice" style="color: var(--text-primary); font-size: 1.25rem; font-weight: 700; margin-bottom: 0.25rem;">-</div>
                        <div style="color: var(--text-muted); font-size: 0.9rem;">Mevcut Fiyat</div>
                    </div>
                    <div style="background: var(--bg-card); padding: 1rem; border-radius: 1rem; text-align: center; border: 1px solid var(--border);">
                        <div style="color: var(--success); font-size: 1.5rem; margin-bottom: 0.5rem;">📦</div>
                        <div id="editCurrentStock" style="color: var(--text-primary); font-size: 1.25rem; font-weight: 700; margin-bottom: 0.25rem;">-</div>
                        <div style="color: var(--text-muted); font-size: 0.9rem;">Stok Miktarı</div>
                    </div>
                    <div style="background: var(--bg-card); padding: 1rem; border-radius: 1rem; text-align: center; border: 1px solid var(--border);">
                        <div style="color: var(--warning); font-size: 1.5rem; margin-bottom: 0.5rem;">⭐</div>
                        <div id="editCurrentFeatured" style="color: var(--text-primary); font-size: 1.25rem; font-weight: 700; margin-bottom: 0.25rem;">-</div>
                        <div style="color: var(--text-muted); font-size: 0.9rem;">Öne Çıkan</div>
                    </div>
                    <div style="background: var(--bg-card); padding: 1rem; border-radius: 1rem; text-align: center; border: 1px solid var(--border);">
                        <div style="color: var(--secondary); font-size: 1.5rem; margin-bottom: 0.5rem;">🏷️</div>
                        <div id="editCurrentCategory" style="color: var(--text-primary); font-size: 1.25rem; font-weight: 700; margin-bottom: 0.25rem;">-</div>
                        <div style="color: var(--text-muted); font-size: 0.9rem;">Kategori</div>
                    </div>
                </div>

                <!-- Temel Bilgiler -->
                <div style="margin-bottom: 2rem;">
                    <h4 style="color: var(--text-primary); margin-bottom: 1rem; display: flex; align-items: center; gap: 0.5rem;">
                        <i class="bi bi-info-circle"></i>
                        Temel Bilgiler
                    </h4>
                    
                    <div class="form-group">
                        <label for="editProductName">Ürün Adı</label>
                        <input type="text" id="editProductName" name="isim" required>
                    </div>

                    <div class="form-group">
                        <label for="editProductDescription">Ürün Açıklaması</label>
                        <textarea id="editProductDescription" name="aciklama" rows="4" required></textarea>
                    </div>
                </div>

                <!-- Fiyat ve Stok -->
                <div style="margin-bottom: 2rem;">
                    <h4 style="color: var(--text-primary); margin-bottom: 1rem; display: flex; align-items: center; gap: 0.5rem;">
                        <i class="bi bi-calculator"></i>
                        Fiyat ve Stok Bilgileri
                    </h4>
                    
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem;">
                        <div class="form-group">
                            <label for="editProductPrice">Fiyat (₺)</label>
                            <input type="number" id="editProductPrice" name="fiyat" required min="0" step="0.01">
                        </div>
                        <div class="form-group">
                            <label for="editProductStock">Stok Miktarı</label>
                            <input type="number" id="editProductStock" name="stok" required min="0">
                        </div>
                    </div>
                </div>

                <!-- Görsel ve Medya -->
                <div style="margin-bottom: 2rem;">
                    <h4 style="color: var(--text-primary); margin-bottom: 1rem; display: flex; align-items: center; gap: 0.5rem;">
                        <i class="bi bi-image"></i>
                        Görsel ve Medya
                    </h4>
                    
                    <div class="form-group">
                        <label for="editProductImage">Ürün Resmi URL</label>
                        <input type="url" id="editProductImage" name="resim" required>
                        <div id="editImagePreview" style="margin-top: 1rem; text-align: center;">
                            <img id="editPreviewImg" src="" alt="Ürün Önizleme" style="max-width: 200px; max-height: 200px; border-radius: 1rem; box-shadow: var(--shadow-lg); border: 2px solid var(--border); display: none;">
                        </div>
                    </div>
                </div>

                <!-- Kategori Seçimi -->
                <div style="margin-bottom: 2rem;">
                    <h4 style="color: var(--text-primary); margin-bottom: 1rem; display: flex; align-items: center; gap: 0.5rem;">
                        <i class="bi bi-tags"></i>
                        Ürün Kategorisi
                    </h4>
                    
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 1rem;">
                        <div class="category-option" data-category="tavuk">
                            <i class="bi bi-egg-fried"></i>
                            <span>Tavuk</span>
                        </div>
                        <div class="category-option" data-category="horoz">
                            <i class="bi bi-egg"></i>
                            <span>Horoz</span>
                        </div>
                        <div class="category-option" data-category="civciv">
                            <i class="bi bi-egg-fill"></i>
                            <span>Civciv</span>
                        </div>
                        <div class="category-option" data-category="yumurta">
                            <i class="bi bi-circle"></i>
                            <span>Yumurta</span>
                        </div>
                    </div>
                    <input type="hidden" id="editProductCategory" name="kategori" value="tavuk">
                </div>

                <!-- Özellikler -->
                <div style="margin-bottom: 2rem;">
                    <h4 style="color: var(--text-primary); margin-bottom: 1rem; display: flex; align-items: center; gap: 0.5rem;">
                        <i class="bi bi-gear"></i>
                        Ürün Özellikleri
                    </h4>
                    
                    <div class="checkbox-label">
                        <input type="checkbox" id="editIsFeatured" name="isFeatured">
                        <span class="checkmark"></span>
                        <label for="editIsFeatured">Bu ürünü ana sayfada öne çıkar</label>
                    </div>
                </div>

                <div class="modal-actions" style="display: flex; gap: 1rem; justify-content: flex-end; margin-top: 2rem; padding-top: 2rem; border-top: 1px solid var(--border);">
                    <button type="button" class="btn-secondary" onclick="closeEditProductModal()" style="background: var(--bg-tertiary); color: var(--text-primary); border: 1px solid var(--border); padding: 0.75rem 1.5rem; border-radius: 0.75rem; font-weight: 600; cursor: pointer; transition: all 0.3s ease;">
                        <i class="bi bi-x-circle"></i>
                        İptal
                    </button>
                    <button type="submit" class="btn-primary" style="background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%); color: white; border: none; padding: 0.75rem 1.5rem; border-radius: 0.75rem; font-weight: 600; cursor: pointer; transition: all 0.3s ease; display: flex; align-items: center; gap: 0.5rem;">
                        <i class="bi bi-check-circle"></i>
                        Değişiklikleri Kaydet
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Order Detail Modal -->
    <div id="orderDetailModal" class="modal" style="display: none;">
        <div class="modal-content" style="max-width: 900px; max-height: 90vh; overflow-y: auto;">
            <div class="modal-header">
                <h3>Sipariş Detayı</h3>
                <button class="close-btn" onclick="closeOrderDetailModal()">&times;</button>
            </div>
            
            <div id="orderDetailContent">
                <!-- Order details will be loaded here -->
            </div>
        </div>
    </div>

    <!-- Message Detail Modal -->
    <div id="messageDetailModal" class="modal" style="display: none;">
        <div class="modal-content" style="max-width: 800px; max-height: 90vh; overflow-y: auto;">
            <div class="modal-header">
                <h3>Mesaj Detayı</h3>
                <button class="close-btn" onclick="closeMessageDetailModal()">&times;</button>
            </div>
            
            <div id="messageDetailContent">
                <!-- Message details will be loaded here -->
            </div>
        </div>
    </div>

    <!-- User Detail Modal -->
    <div id="userDetailModal" class="modal" style="display: none;">
        <div class="modal-content" style="max-width: 1000px; max-height: 90vh; overflow-y: auto;">
            <div class="modal-header">
                <h3>Kullanıcı Detayı</h3>
                <button class="close-btn" onclick="closeUserDetailModal()">&times;</button>
            </div>
            
            <div id="userDetailContent">
                <!-- User details will be loaded here -->
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let orders = [];
        let filteredOrders = [];
        let messages = [];
        let filteredMessages = [];
        
        // Tab Switching
        function switchTab(tabName) {
            try {
                // Remove active class from all tabs and content sections
                document.querySelectorAll('.nav-tab').forEach(tab => tab.classList.remove('active'));
                document.querySelectorAll('.content-section').forEach(section => section.classList.remove('active'));
                
                // Activate the correct tab by ID
                const tabId = tabName + '-tab';
                const targetTab = document.getElementById(tabId);
                if (targetTab) {
                    targetTab.classList.add('active');
                }
                
                // Activate the content section
                const contentSection = document.getElementById(tabName);
                if (contentSection) {
                    contentSection.classList.add('active');
                }
                
                // Load data when switching to specific tabs (only if not already loaded)
                if (tabName === 'messages' && (!messages || messages.length === 0)) {
                    loadMessages();
                } else if (tabName === 'orders' && (!orders || orders.length === 0)) {
                    refreshOrders();
                } else if (tabName === 'users' && (!users || users.length === 0)) {
                    refreshUsers();
                }
                
                // Save current tab to localStorage
                localStorage.setItem('activeTab', tabName);
            } catch (error) {
                console.error('Error in switchTab:', error);
            }
        }
        
        // Make switchTab globally available
        window.switchTab = switchTab;

        // Restore active tab on page load
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize data
            initializeData();
            
            const savedTab = localStorage.getItem('activeTab');
            if (savedTab) {
                switchTab(savedTab);
            }
        });
        
        function initializeData() {
            // Load initial data
            loadMessages();
            refreshOrders();
            
            // Sayfa yüklendiğinde siparişler tablosunu düzelt
            setTimeout(() => {
                if (document.getElementById('orders').classList.contains('active')) {
                    displayOrders();
                }
            }, 1000);
        }

        // Global Search
        document.getElementById('globalSearch').addEventListener('input', function(e) {
            const searchTerm = e.target.value;
            if (searchTerm.length > 2) {
                showNotification(`"${searchTerm}" için arama yapılıyor...`, 'info');
            }
        });

        // Refresh Dashboard
        function refreshDashboard() {
            const btn = event.target.closest('.action-btn');
            const originalContent = btn.innerHTML;
            
            btn.innerHTML = '<div class="loading"></div>';
            btn.disabled = true;
            
            setTimeout(() => {
                btn.innerHTML = originalContent;
                btn.disabled = false;
                showNotification('Dashboard başarıyla yenilendi!', 'success');
            }, 2000);
        }

        // Toggle Notifications
        function toggleNotifications() {
            showNotification('Bildirimler açıldı!', 'info');
        }

        // Toggle Theme
        function toggleTheme() {
            showNotification('Tema değiştirildi!', 'info');
        }

        // Toggle User Menu
        function toggleUserMenu() {
            showNotification('Kullanıcı menüsü açıldı!', 'info');
        }

        // Notification System
        function showNotification(message, type = 'info') {
            const container = document.getElementById('notificationContainer');
    const notification = document.createElement('div');
            notification.className = `notification ${type}`;
    notification.innerHTML = `
                <div style="display: flex; align-items: center; gap: 0.75rem;">
                    <i class="bi bi-${getNotificationIcon(type)}" style="color: var(--${type === 'error' ? 'danger' : type});"></i>
                    <span>${message}</span>
                </div>
            `;
            
            container.appendChild(notification);
            
            // Show notification
            setTimeout(() => notification.classList.add('show'), 100);
            
            // Hide notification after 3 seconds
    setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => container.removeChild(notification), 300);
            }, 3000);
        }

        function getNotificationIcon(type) {
            const icons = {
                success: 'check-circle',
                error: 'x-circle',
                warning: 'exclamation-triangle',
                info: 'info-circle'
            };
            return icons[type] || 'info-circle';
        }

        // Modal Functions
        function showAddProductModal() {
            document.getElementById('addProductModal').style.display = 'flex';
        }

        function closeAddProductModal() {
            document.getElementById('addProductModal').style.display = 'none';
            document.getElementById('addProductForm').reset();
        }

        // Product Management Functions
        function editProduct(productId) {
            // Fetch product data and open edit modal
            fetch(`/admin/get-product/${productId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        populateEditForm(data.product);
                        showEditProductModal();
                    } else {
                        showNotification('Ürün bilgileri alınamadı', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showNotification('Bir hata oluştu', 'error');
                });
        }

        function populateEditForm(product) {
            document.getElementById('editProductId').value = product._id;
            document.getElementById('editProductName').value = product.isim || '';
            document.getElementById('editProductDescription').value = product.aciklama || '';
            document.getElementById('editProductPrice').value = product.fiyat || '';
            document.getElementById('editProductStock').value = product.stok || '';
            document.getElementById('editProductImage').value = product.resim || '';
            document.getElementById('editIsFeatured').checked = product.isFeatured || false;
            
            // Update statistics cards
            document.getElementById('editCurrentPrice').textContent = product.fiyat ? `₺${product.fiyat}` : '-';
            document.getElementById('editCurrentStock').textContent = product.stok || '-';
            document.getElementById('editCurrentFeatured').textContent = product.isFeatured ? 'Evet' : 'Hayır';
            
            // Set category
            const category = product.kategori || 'tavuk';
            document.querySelectorAll('#editProductModal .category-option').forEach(option => {
                option.classList.remove('selected');
                if (option.dataset.category === category) {
                    option.classList.add('selected');
                }
            });
            document.getElementById('editProductCategory').value = category;
            
            // Update category display
            const categoryDisplay = category.charAt(0).toUpperCase() + category.slice(1);
            document.getElementById('editCurrentCategory').textContent = categoryDisplay;
            
            // Update preview image
            if (product.resim) {
                const previewImg = document.getElementById('editPreviewImg');
                previewImg.src = product.resim;
                previewImg.style.display = 'block';
            }
        }

        function showEditProductModal() {
            document.getElementById('editProductModal').style.display = 'flex';
        }

        function closeEditProductModal() {
            document.getElementById('editProductModal').style.display = 'none';
        }

        function deleteProduct(productId) {
    if (confirm('Bu ürünü silmek istediğinizden emin misiniz?')) {
                fetch(`/admin/delete-product/${productId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showNotification('Ürün başarıyla silindi!', 'success');
                        // Ürünler sekmesine geç
                        switchTab('products');
                        // Remove the deleted product from the table
                        const productRow = document.querySelector(`tr[data-product-id="${productId}"]`);
                        if (productRow) {
                            productRow.remove();
                        }
                        // Update product count
                        updateProductStats();
                    } else {
                        showNotification('Ürün silinirken hata oluştu!', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showNotification('Ürün silinirken hata oluştu!', 'error');
                });
            }
        }

        // Add event listeners for product buttons
        document.addEventListener('DOMContentLoaded', function() {
            // Edit product buttons
            document.querySelectorAll('.edit-product-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const productId = this.getAttribute('data-product-id');
                    editProduct(productId);
                });
            });

            // Delete product buttons
            document.querySelectorAll('.delete-product-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const productId = this.getAttribute('data-product-id');
                    deleteProduct(productId);
                });
            });

            // Add product form
            document.getElementById('addProductForm').addEventListener('submit', function(e) {
                e.preventDefault();
                
                const formData = new FormData(this);
                const productData = {
                    isim: formData.get('isim'),
                    aciklama: formData.get('aciklama'),
                    fiyat: formData.get('fiyat'),
                    resim: formData.get('resim') || 'https://images.unsplash.com/photo-1548550023-8bdb5b4c0a0e?w=400&h=300&fit=crop',
                    stok: parseInt(formData.get('stok')),
                    isFeaturedAdd: formData.get('isFeaturedAdd') === 'on'
                };

                fetch('/admin/add-product', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(productData)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showNotification('Ürün başarıyla eklendi!', 'success');
                        closeAddProductModal();
                        // Ürünler sekmesine geç
                        switchTab('products');
                        // Add the new product to the table
                        addProductToTable(data.product);
                        // Update product count
                        updateProductStats();
        } else {
                        showNotification('Ürün eklenirken hata oluştu!', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showNotification('Ürün eklenirken hata oluştu!', 'error');
                });
            });

            // Edit product form
            document.getElementById('editProductForm').addEventListener('submit', function(e) {
                e.preventDefault();
                
                const productId = document.getElementById('editProductId').value;
                const formData = new FormData(this);
                
                // Debug için form verilerini logla
                console.log('Form Data:');
                for (let [key, value] of formData.entries()) {
                    console.log(key, value);
                }
                
                const productData = {
                    isim: formData.get('isim') || '',
                    aciklama: formData.get('aciklama') || '',
                    fiyat: formData.get('fiyat') || '0',
                    resim: formData.get('resim') || '',
                    stok: parseInt(formData.get('stok')) || 0,
                    kategori: formData.get('kategori') || 'tavuk',
                    isFeatured: formData.get('isFeatured') === 'on'
                };
                
                console.log('Product Data to send:', productData);

                // Loading state
                const submitBtn = this.querySelector('button[type="submit"]');
                const originalText = submitBtn.innerHTML;
                submitBtn.innerHTML = '<i class="bi bi-hourglass-split"></i> Kaydediliyor...';
                submitBtn.disabled = true;

                fetch(`/admin/edit-product/${productId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(productData)
                })
                .then(response => {
                    console.log('Response status:', response.status);
                    console.log('Response headers:', response.headers);
                    
                    // Content-Type kontrolü
                    const contentType = response.headers.get('content-type');
                    if (!contentType || !contentType.includes('application/json')) {
                        throw new Error(`Server HTML döndürdü, JSON bekleniyordu. Status: ${response.status}`);
                    }
                    
                    return response.json();
                })
                .then(data => {
                    console.log('Response data:', data);
                    if (data.success) {
                        showNotification('Ürün başarıyla güncellendi!', 'success');
                        closeEditProductModal();
                        // Ürünler sekmesine geç
                        switchTab('products');
                        // Update the product in the table
                        updateProductInTable(data.product);
                        // Update product count
                        updateProductStats();
                    } else {
                        console.error('Backend Error:', data);
                        showNotification(data.message || 'Ürün güncellenirken hata oluştu!', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showNotification('Ürün güncellenirken hata oluştu!', 'error');
                })
                .finally(() => {
                    // Reset button state
                    submitBtn.innerHTML = originalText;
                    submitBtn.disabled = false;
                });
            });

            // Edit image preview
            document.getElementById('editProductImage').addEventListener('input', function() {
                const preview = document.getElementById('editPreviewImg');
                const url = this.value;
                
                if (url) {
                    preview.src = url;
                    preview.style.display = 'block';
                    preview.onerror = function() {
                        preview.style.display = 'none';
                    };
                } else {
                    preview.style.display = 'none';
                }
            });

            // Edit category selection
            document.addEventListener('click', function(e) {
                if (e.target.closest('#editProductModal .category-option')) {
                    const option = e.target.closest('#editProductModal .category-option');
                    
                    // Remove selected class from all options in edit modal
                    document.querySelectorAll('#editProductModal .category-option').forEach(opt => opt.classList.remove('selected'));
                    
                    // Add selected class to clicked option
                    option.classList.add('selected');
                    
                    // Update hidden input
                    document.getElementById('editProductCategory').value = option.dataset.category;
                    
                    // Update category display in stats
                    const categoryDisplay = option.dataset.category.charAt(0).toUpperCase() + option.dataset.category.slice(1);
                    document.getElementById('editCurrentCategory').textContent = categoryDisplay;
                }
            });
        });

        // Product Management Helper Functions
        function addProductToTable(product) {
            const tbody = document.getElementById('productsTableBody');
            if (!tbody || !product) return;
            
            const row = document.createElement('tr');
            row.setAttribute('data-product-id', product._id);
            row.innerHTML = `
                <td>
                    <div class="product-info">
                        <img src="${product.resim || '/images/placeholder.jpg'}" alt="${product.isim}" class="product-image">
                        <div class="product-details">
                            <h6 class="product-name">${product.isim}</h6>
                            <p class="product-description">${product.aciklama || 'Açıklama yok'}</p>
                        </div>
                    </div>
                </td>
                <td>₺${product.fiyat}</td>
                <td>
                    <span class="badge ${product.stok > 0 ? 'bg-success' : 'bg-danger'}">
                        ${product.stok} adet
                    </span>
                </td>
                <td>
                    <span class="badge ${product.isFeatured ? 'bg-warning' : 'bg-secondary'}">
                        ${product.isFeatured ? 'Öne Çıkan' : 'Normal'}
                    </span>
                </td>
                <td>
                    <div class="action-buttons">
                        <button class="btn btn-sm btn-outline-primary" onclick="editProduct('${product._id}')">
                            <i class="bi bi-pencil"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger" onclick="deleteProduct('${product._id}')">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                </td>
            `;
            tbody.appendChild(row);
        }
        
        function updateProductInTable(product) {
            const row = document.querySelector(`tr[data-product-id="${product._id}"]`);
            if (!row) return;
            
            // Update product info
            const productName = row.querySelector('.product-name');
            const productDescription = row.querySelector('.product-description');
            const productImage = row.querySelector('.product-image');
            const priceCell = row.cells[1];
            const stockCell = row.cells[2];
            const featuredCell = row.cells[3];
            
            if (productName) productName.textContent = product.isim;
            if (productDescription) productDescription.textContent = product.aciklama || 'Açıklama yok';
            if (productImage) productImage.src = product.resim || '/images/placeholder.jpg';
            if (priceCell) priceCell.textContent = `₺${product.fiyat}`;
            if (stockCell) {
                stockCell.innerHTML = `<span class="badge ${product.stok > 0 ? 'bg-success' : 'bg-danger'}">${product.stok} adet</span>`;
            }
            if (featuredCell) {
                featuredCell.innerHTML = `<span class="badge ${product.isFeatured ? 'bg-warning' : 'bg-secondary'}">${product.isFeatured ? 'Öne Çıkan' : 'Normal'}</span>`;
            }
        }
        
        function updateProductStats() {
            const productCount = document.querySelectorAll('tr[data-product-id]').length;
            const productCountElement = document.getElementById('productCount');
            if (productCountElement) {
                productCountElement.textContent = productCount;
            }
        }
        
        function displayOrders() {
            const tbody = document.getElementById('ordersTableBody');
            if (!tbody) return;
            
            tbody.innerHTML = '';
            
            
            filteredOrders.forEach((order, index) => {
                // Sıralı sipariş numarası (1'den başlayarak)
                const orderNumber = index + 1;
                
                // Ürün listesini hazırla - daha detaylı bilgi
                let productsList = '';
                if (order.products && order.products.length > 0) {
                    productsList = order.products.map(item => {
                        const productName = (item.product && item.product.isim) ? item.product.isim : 'Silinmiş Ürün';
                        const quantity = item.quantity || 1;
                        const price = (item.product && item.product.fiyat) ? item.product.fiyat : 'N/A';
                        
                        // Eğer ürün bilgisi yoksa sadece adet göster
                        if (!item.product || !item.product.isim) {
                            return `Silinmiş Ürün (${quantity}x)`;
                        }
                        
                        return `${productName} (${quantity}x) - ₺${price}`;
                    }).join('<br>');
                } else {
                    productsList = '<span style="color: var(--text-muted); font-style: italic;">Ürün bilgisi yok</span>';
                }
                
                const row = document.createElement('tr');
                row.style.cssText = 'border-bottom: 1px solid var(--border); transition: all 0.3s ease; background: var(--bg-card);';
                row.innerHTML = `
                    <td style="padding: 1rem; color: var(--text-primary); font-weight: 600;">
                        <div style="display: flex; align-items: center; justify-content: flex-start;">
                            <span style="font-size: 1.2rem; font-weight: 700; color: var(--primary); background: linear-gradient(135deg, var(--primary), #6366f1); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text;">
                                #${orderNumber.toString().padStart(4, '0')}
                            </span>
                        </div>
                    </td>
                    <td style="padding: 1rem; color: var(--text-primary);">
                        <div style="display: flex; flex-direction: column; gap: 0.25rem;">
                            <span style="font-weight: 500;">${order.user && order.user.email ? order.user.email : (order.user ? 'Kullanıcı bulunamadı' : 'Misafir')}</span>
                        </div>
                    </td>
                    <td style="padding: 1rem; color: var(--text-primary);">
                        <div style="max-width: 250px; max-height: 80px; overflow-y: auto; font-size: 0.875rem; line-height: 1.4;">
                            ${productsList}
                        </div>
                    </td>
                    <td style="padding: 1rem; color: var(--text-primary); font-weight: 600;">
                        <div style="display: flex; flex-direction: column; gap: 0.25rem; align-items: flex-start;">
                            <span style="font-size: 1.1rem; color: var(--success);">₺${order.total}</span>
                        </div>
                    </td>
                    <td style="padding: 1rem;">
                        <div style="display: flex; flex-direction: column; gap: 0.25rem; align-items: flex-start;">
                            <span class="status-badge status-${order.status.toLowerCase().replace(/\s+/g, '-')}" style="
                                padding: 0.5rem 1rem; 
                                border-radius: 2rem; 
                                font-size: 0.875rem; 
                                font-weight: 600; 
                                text-transform: capitalize;
                                display: inline-block;
                                transition: all 0.3s ease;
                                cursor: pointer;
                                position: relative;
                                ${getStatusBadgeStyle(order.status)}
                            " onmouseover="this.style.transform='scale(1.05)'" onmouseout="this.style.transform='scale(1)'">
                                <i class="bi ${getStatusIcon(order.status)}" style="margin-right: 0.5rem;"></i>
                                ${order.status}
                            </span>
                        </div>
                    </td>
                    <td style="padding: 1rem; color: var(--text-primary);">
                        <div style="display: flex; flex-direction: column; gap: 0.5rem; align-items: flex-start;">
                            <div style="display: flex; flex-direction: column; gap: 0.25rem;">
                                <span style="font-size: 1rem; font-weight: 700; color: var(--text-primary);">
                                    ${new Date(order.createdAt).toLocaleDateString('tr-TR', {
                                        day: '2-digit',
                                        month: '2-digit', 
                                        year: 'numeric'
                                    })}
                                </span>
                                <span style="font-size: 0.85rem; color: var(--text-muted); font-weight: 500;">
                                    ${new Date(order.createdAt).toLocaleDateString('tr-TR', {
                                        weekday: 'long'
                                    })}
                                </span>
                            </div>
                            <div style="display: flex; align-items: center; gap: 0.5rem; background: linear-gradient(135deg, var(--bg-tertiary), var(--bg-secondary)); padding: 0.5rem 0.75rem; border-radius: 0.5rem; border: 1px solid var(--border);">
                                <i class="bi bi-clock" style="font-size: 0.8rem; color: var(--primary);"></i>
                                <span style="font-size: 0.9rem; color: var(--text-primary); font-weight: 600;">
                                    ${new Date(order.createdAt).toLocaleTimeString('tr-TR', {
                                        hour: '2-digit', 
                                        minute: '2-digit',
                                        second: '2-digit'
                                    })}
                                </span>
                            </div>
                        </div>
                    </td>
                    <td style="padding: 1rem;">
                        <div class="action-buttons" style="display: flex; justify-content: center; align-items: center;">
                            <button class="action-btn view-btn" onclick="viewOrder('${order._id}')" style="
                                padding: 0.75rem 1.5rem; 
                                background: linear-gradient(135deg, #10b981, #059669); 
                                color: white; 
                                border: none; 
                                border-radius: 0.75rem; 
                                cursor: pointer; 
                                display: flex; 
                                align-items: center; 
                                gap: 0.75rem;
                                font-size: 0.9rem;
                                font-weight: 600;
                                transition: all 0.3s ease;
                                box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
                                min-width: 100px;
                                justify-content: center;
                            " onmouseover="this.style.transform='translateY(-3px) scale(1.05)'; this.style.boxShadow='0 8px 20px rgba(16, 185, 129, 0.4)'" onmouseout="this.style.transform='translateY(0) scale(1)'; this.style.boxShadow='0 4px 12px rgba(16, 185, 129, 0.3)'">
                                <i class="bi bi-eye-fill" style="font-size: 1rem;"></i>
                                <span>Detay</span>
                            </button>
                        </div>
                    </td>
                `;
                
                // Satır hover efekti kaldırıldı - sadece butonlarda hover var
                
                tbody.appendChild(row);
            });
        }
        
        function getStatusBadgeClass(status) {
            switch(status) {
                case 'Beklemede': return 'bg-warning';
                case 'Onaylandı': return 'bg-success';
                case 'Kargoda': return 'bg-info';
                case 'Teslim Edildi': return 'bg-primary';
                case 'Reddedildi': return 'bg-danger';
                default: return 'bg-secondary';
            }
        }
        
        function getStatusBadgeStyle(status) {
            switch(status) {
                case 'Beklemede': 
                    return 'background: linear-gradient(135deg, #f59e0b, #d97706); color: white; box-shadow: 0 2px 4px rgba(245, 158, 11, 0.3);';
                case 'Onaylandı': 
                    return 'background: linear-gradient(135deg, #10b981, #059669); color: white; box-shadow: 0 2px 4px rgba(16, 185, 129, 0.3);';
                case 'Kargoda': 
                    return 'background: linear-gradient(135deg, #06b6d4, #0891b2); color: white; box-shadow: 0 2px 4px rgba(6, 182, 212, 0.3);';
                case 'Teslim Edildi': 
                    return 'background: linear-gradient(135deg, #6366f1, #4f46e5); color: white; box-shadow: 0 2px 4px rgba(99, 102, 241, 0.3);';
                case 'Reddedildi': 
                    return 'background: linear-gradient(135deg, #ef4444, #dc2626); color: white; box-shadow: 0 2px 4px rgba(239, 68, 68, 0.3);';
                default: 
                    return 'background: linear-gradient(135deg, #6b7280, #4b5563); color: white; box-shadow: 0 2px 4px rgba(107, 114, 128, 0.3);';
            }
        }
        
        function getStatusIcon(status) {
            switch(status) {
                case 'Beklemede': return 'bi-clock';
                case 'Onaylandı': return 'bi-check-circle';
                case 'Kargoda': return 'bi-truck';
                case 'Teslim Edildi': return 'bi-house-check';
                case 'Reddedildi': return 'bi-x-circle';
                default: return 'bi-question-circle';
            }
        }

        function getStatusColor(status) {
            switch(status) {
                case 'Beklemede': return '#f59e0b, #d97706';
                case 'Onaylandı': return '#3b82f6, #2563eb';
                case 'Kargoda': return '#8b5cf6, #7c3aed';
                case 'Teslim Edildi': return '#10b981, #059669';
                case 'Reddedildi': return '#ef4444, #dc2626';
                default: return '#6b7280, #4b5563';
            }
        }
        
        function updateOrderStats() {
            const totalOrders = orders.length;
            const pendingOrders = orders.filter(order => order.status === 'Beklemede').length;
            const completedOrders = orders.filter(order => order.status === 'Teslim Edildi').length;
            
            // Sadece teslim edilen siparişlerin gelirini hesapla
            const totalRevenue = orders
                .filter(order => order.status === 'Teslim Edildi')
                .reduce((sum, order) => sum + (order.total || 0), 0);
            
            const totalOrdersElement = document.getElementById('totalOrders');
            const pendingOrdersElement = document.getElementById('pendingOrders');
            const completedCountElement = document.getElementById('completedCount');
            const totalRevenueElement = document.getElementById('totalRevenue');
            
            if (totalOrdersElement) {
                totalOrdersElement.textContent = totalOrders;
            }
            if (pendingOrdersElement) {
                pendingOrdersElement.textContent = pendingOrders;
            }
            if (completedCountElement) {
                completedCountElement.textContent = completedOrders;
            }
            if (totalRevenueElement) {
                totalRevenueElement.textContent = '₺' + totalRevenue.toLocaleString('tr-TR');
            }
        }

        // Orders Management Functions
        function refreshOrders() {
            showNotification('Siparişler yenileniyor...', 'info');
            
            // AJAX ile siparişleri yenile, sayfa yenileme yapma
            fetch('/admin/orders')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        orders = data.orders;
                        filteredOrders = [...orders];
                        displayOrders();
                        updateOrderStats();
                        calculateOrderStats(); // Ek istatistik hesaplaması
                        showNotification('Siparişler başarıyla yenilendi!', 'success');
                    } else {
                        showNotification('Siparişler yüklenirken hata oluştu!', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error loading orders:', error);
                    showNotification('Siparişler yüklenirken hata oluştu!', 'error');
                });
        }

        function viewOrder(orderId) {
            console.log('Fetching order details for ID:', orderId);
            console.log('ID type:', typeof orderId);
            console.log('ID length:', orderId ? orderId.length : 'undefined');
            
            // Validate orderId
            if (!orderId || orderId.length < 10) {
                showNotification('Geçersiz sipariş ID!', 'error');
                return;
            }
            
            // Show loading notification
            showNotification('Sipariş detayları yükleniyor...', 'info');
            
            fetch(`/admin/get-order/${orderId}`)
                .then(response => {
                    console.log('Response status:', response.status);
                    console.log('Response headers:', response.headers);
                    
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    
                    return response.json();
                })
                .then(data => {
                    console.log('Order data received:', data);
                    
                    if (data.success) {
                        populateOrderDetailModal(data.order);
                        showOrderDetailModal();
                        showNotification('Sipariş detayları yüklendi', 'success');
                    } else {
                        console.error('Backend error:', data.message);
                        showNotification(data.message || 'Sipariş bilgileri alınamadı', 'error');
                    }
                })
                .catch(error => {
                    console.error('Fetch error:', error);
                    showNotification(`Hata: ${error.message}`, 'error');
                });
        }

        function populateOrderDetailModal(order) {
            const content = `
                <!-- Sipariş Bilgileri -->
                <div style="background: var(--bg-glass); backdrop-filter: blur(10px); border-radius: 1.5rem; padding: 2rem; margin-bottom: 1.5rem; border: 1px solid var(--border);">
                    <h4 style="color: var(--text-primary); margin-bottom: 1.5rem; display: flex; align-items: center; gap: 0.5rem;">
                        <i class="bi bi-info-circle"></i>
                        Sipariş Bilgileri
                    </h4>
                    
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1rem;">
                        <div style="background: var(--bg-tertiary); padding: 1rem; border-radius: 1rem; border: 1px solid var(--border);">
                            <div style="color: var(--text-muted); font-size: 0.9rem; margin-bottom: 0.5rem;">Sipariş ID</div>
                            <div style="color: var(--text-primary); font-weight: 600; font-family: monospace;">${order._id}</div>
                        </div>
                        <div style="background: var(--bg-tertiary); padding: 1rem; border-radius: 1rem; border: 1px solid var(--border);">
                            <div style="color: var(--text-muted); font-size: 0.9rem; margin-bottom: 0.5rem;">Müşteri E-postası</div>
                            <div style="color: var(--text-primary); font-weight: 600;">${order.user ? order.user.email : 'Misafir'}</div>
                        </div>
                        <div style="background: var(--bg-tertiary); padding: 1rem; border-radius: 1rem; border: 1px solid var(--border);">
                            <div style="color: var(--text-muted); font-size: 0.9rem; margin-bottom: 0.5rem;">Sipariş Tarihi</div>
                            <div style="color: var(--text-primary); font-weight: 600;">${new Date(order.createdAt).toLocaleString('tr-TR')}</div>
                        </div>
                        <div style="background: var(--bg-tertiary); padding: 1rem; border-radius: 1rem; border: 1px solid var(--border);">
                            <div style="color: var(--text-muted); font-size: 0.9rem; margin-bottom: 0.5rem;">Sipariş Tutarı</div>
                            <div style="color: var(--primary); font-weight: 700; font-size: 1.25rem;">₺${order.total || 0}</div>
                        </div>
                        <div style="background: var(--bg-tertiary); padding: 1rem; border-radius: 1rem; border: 1px solid var(--border);">
                            <div style="color: var(--text-muted); font-size: 0.9rem; margin-bottom: 0.5rem;">Mevcut Durum</div>
                            <span class="status-badge status-${order.status.toLowerCase().replace(' ', '-')}" style="padding: 0.5rem 1rem; border-radius: 2rem; font-size: 0.875rem; font-weight: 600; text-transform: capitalize;">
                                ${order.status}
                            </span>
                        </div>
                    </div>
                </div>

                <!-- Sipariş Edilen Ürünler -->
                <div style="background: var(--bg-glass); backdrop-filter: blur(10px); border-radius: 1.5rem; padding: 2rem; margin-bottom: 1.5rem; border: 1px solid var(--border);">
                    <h4 style="color: var(--text-primary); margin-bottom: 1.5rem; display: flex; align-items: center; gap: 0.5rem;">
                        <i class="bi bi-box-seam"></i>
                        Sipariş Edilen Ürünler
                    </h4>
                    
                    <div style="overflow-x: auto;">
                        <table style="width: 100%; border-collapse: collapse;">
                            <thead style="background: var(--bg-tertiary);">
                                <tr>
                                    <th style="padding: 1rem; text-align: left; color: var(--text-primary); font-weight: 600; border-bottom: 1px solid var(--border);">Ürün Adı</th>
                                    <th style="padding: 1rem; text-align: center; color: var(--text-primary); font-weight: 600; border-bottom: 1px solid var(--border);">Adet</th>
                                    <th style="padding: 1rem; text-align: right; color: var(--text-primary); font-weight: 600; border-bottom: 1px solid var(--border);">Birim Fiyat</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${order.products && order.products.length > 0 ? 
                                    order.products.map(item => `
                                        <tr style="border-bottom: 1px solid var(--border);">
                                            <td style="padding: 1rem; color: var(--text-primary);">
                                                ${item.product && item.product.isim ? item.product.isim : 'Ürün Silinmiş'}
                                            </td>
                                            <td style="padding: 1rem; text-align: center; color: var(--text-primary); font-weight: 600;">
                                                ${item.quantity || 1}
                                            </td>
                                            <td style="padding: 1rem; text-align: right; color: var(--text-primary); font-weight: 600;">
                                                ₺${item.product && item.product.fiyat ? item.product.fiyat : '0'}
                                            </td>
                                        </tr>
                                    `).join('') : 
                                    '<tr><td colspan="3" style="padding: 2rem; text-align: center; color: var(--text-muted);">Ürün bilgisi bulunamadı</td></tr>'
                                }
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Sipariş Durumunu Güncelle -->
                <div style="background: var(--bg-glass); backdrop-filter: blur(10px); border-radius: 1.5rem; padding: 2rem; border: 1px solid var(--border);">
                    <h4 style="color: var(--text-primary); margin-bottom: 1.5rem; display: flex; align-items: center; gap: 0.5rem;">
                        <i class="bi bi-pencil-square"></i>
                        Sipariş Durumunu Güncelle
                    </h4>
                    
                    <form id="updateOrderStatusForm">
                        <div style="margin-bottom: 1.5rem;">
                            <label style="color: var(--text-primary); font-weight: 600; margin-bottom: 0.5rem; display: block;">Yeni Durum:</label>
                            <select id="newOrderStatus" style="background: var(--bg-tertiary); border: 1px solid var(--border); border-radius: 0.75rem; padding: 0.75rem 1rem; color: var(--text-primary); width: 100%; font-size: 1rem;">
                                <option value="Beklemede" ${order.status === 'Beklemede' ? 'selected' : ''}>Beklemede</option>
                                <option value="Onaylandı" ${order.status === 'Onaylandı' ? 'selected' : ''}>Onaylandı</option>
                                <option value="Hazırlanıyor" ${order.status === 'Hazırlanıyor' ? 'selected' : ''}>Hazırlanıyor</option>
                                <option value="Kargoda" ${order.status === 'Kargoda' ? 'selected' : ''}>Kargoda</option>
                                <option value="Teslim Edildi" ${order.status === 'Teslim Edildi' ? 'selected' : ''}>Teslim Edildi</option>
                                <option value="Reddedildi" ${order.status === 'Reddedildi' ? 'selected' : ''}>Reddedildi</option>
                            </select>
                        </div>
                        
                        <!-- Reddetme Sebebi Alanı (Sadece Reddedildi seçildiğinde görünür) -->
                        <div id="rejectionReasonDiv" style="margin-bottom: 1.5rem; display: none;">
                            <label style="color: var(--text-primary); font-weight: 600; margin-bottom: 0.5rem; display: block;">
                                <i class="bi bi-exclamation-triangle" style="color: #ff6b6b; margin-right: 0.5rem;"></i>
                                Reddetme Sebebi:
                            </label>
                            <textarea 
                                id="rejectionReason" 
                                placeholder="Siparişin neden reddedildiğini açıklayın... (Müşteriye gönderilecek)"
                                style="background: var(--bg-tertiary); border: 1px solid var(--border); border-radius: 0.75rem; padding: 0.75rem 1rem; color: var(--text-primary); width: 100%; font-size: 1rem; min-height: 80px; resize: vertical; font-family: inherit;"
                            ></textarea>
                            <small style="color: var(--text-secondary); font-size: 0.875rem; margin-top: 0.5rem; display: block;">
                                Bu açıklama müşteriye e-posta ile gönderilecektir.
                            </small>
                        </div>
                        
                        <div style="display: flex; gap: 1rem; justify-content: flex-end;">
                            <button type="button" onclick="closeOrderDetailModal()" style="background: var(--bg-tertiary); color: var(--text-primary); border: 1px solid var(--border); padding: 0.75rem 1.5rem; border-radius: 0.75rem; font-weight: 600; cursor: pointer; transition: all 0.3s ease;">
                                <i class="bi bi-x-circle"></i>
                                İptal
                            </button>
                            <button type="submit" style="background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%); color: white; border: none; padding: 0.75rem 1.5rem; border-radius: 0.75rem; font-weight: 600; cursor: pointer; transition: all 0.3s ease; display: flex; align-items: center; gap: 0.5rem;">
                                <i class="bi bi-check-circle"></i>
                                Durumu Güncelle
                            </button>
                        </div>
                    </form>
                </div>
            `;
            
            document.getElementById('orderDetailContent').innerHTML = content;
            
            // Add form submit handler
            document.getElementById('updateOrderStatusForm').addEventListener('submit', function(e) {
                e.preventDefault();
                updateOrderStatusFromModal(order._id);
            });
            
            // Add status change listener for rejection reason field
            document.getElementById('newOrderStatus').addEventListener('change', function(e) {
                const rejectionReasonDiv = document.getElementById('rejectionReasonDiv');
                const rejectionReason = document.getElementById('rejectionReason');
                
                if (e.target.value === 'Reddedildi') {
                    rejectionReasonDiv.style.display = 'block';
                    rejectionReason.required = true;
                } else {
                    rejectionReasonDiv.style.display = 'none';
                    rejectionReason.required = false;
                    rejectionReason.value = ''; // Clear the field when not rejected
                }
            });
        }

        function showOrderDetailModal() {
            document.getElementById('orderDetailModal').style.display = 'flex';
        }

        function closeOrderDetailModal() {
            document.getElementById('orderDetailModal').style.display = 'none';
        }

        function updateOrderStatusFromModal(orderId) {
            const newStatus = document.getElementById('newOrderStatus').value;
            const rejectionReason = document.getElementById('rejectionReason').value;
            
            if (!newStatus) {
                showNotification('Lütfen bir durum seçin!', 'error');
                return;
            }
            
            // Reddedildi seçildiyse sebep kontrolü
            if (newStatus === 'Reddedildi' && !rejectionReason.trim()) {
                showNotification('Sipariş reddedildiğinde sebep açıklaması zorunludur!', 'error');
                return;
            }
            
            const requestData = { 
                status: newStatus 
            };
            
            // Reddetme sebebi varsa ekle
            if (newStatus === 'Reddedildi' && rejectionReason.trim()) {
                requestData.rejectionReason = rejectionReason.trim();
            }
            
            fetch(`/admin/update-order-status/${orderId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(requestData)
            })
            .then(response => {
                console.log('Response status:', response.status);
                console.log('Response headers:', response.headers);
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                return response.json();
            })
            .then(data => {
                console.log('Response data:', data);
                
                if (data.success) {
                    showNotification('Sipariş durumu güncellendi!', 'success');
                    closeOrderDetailModal();
                    // Siparişler sekmesine geç
                    switchTab('orders');
                    // Refresh orders data
                    refreshOrders();
                } else {
                    console.error('Backend error:', data);
                    showNotification(data.message || 'Durum güncellenirken hata oluştu!', 'error');
                }
            })
            .catch(error => {
                console.error('Fetch error:', error);
                showNotification(`Hata: ${error.message}`, 'error');
            });
        }

        function updateOrderStatus(orderId) {
            const newStatus = prompt('Yeni durumu seçin:\n1. Beklemede\n2. Onaylandı\n3. Hazırlanıyor\n4. Kargoda\n5. Teslim Edildi\n6. Reddedildi\n\nNumarayı girin (1-6):');
            
            if (!newStatus) return;
            
            const statusMap = {
                '1': 'Beklemede',
                '2': 'Onaylandı', 
                '3': 'Hazırlanıyor',
                '4': 'Kargoda',
                '5': 'Teslim Edildi',
                '6': 'Reddedildi'
            };
            
            const selectedStatus = statusMap[newStatus];
            if (!selectedStatus) {
                showNotification('Geçersiz seçim!', 'error');
                return;
            }
            
            fetch(`/admin/update-order-status/${orderId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ status: selectedStatus })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showNotification('Sipariş durumu güncellendi!', 'success');
                    // Siparişler sekmesine geç
                    switchTab('orders');
                    // Refresh orders data
                    refreshOrders();
                    // İstatistikleri güncelle
                    updateOrderStats();
                } else {
                    showNotification('Durum güncellenirken hata oluştu!', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showNotification('Durum güncellenirken hata oluştu!', 'error');
            });
        }

        // Orders Filter Functions
        function filterOrders() {
            const statusFilter = document.getElementById('statusFilter').value;
            const dateFilter = document.getElementById('dateFilter').value;
            const searchTerm = document.getElementById('searchOrders').value.toLowerCase();
            
            // Eğer arama terimi varsa, önce JavaScript array'inde ara
            if (searchTerm && orders && orders.length > 0) {
                filteredOrders = orders.filter(order => {
                    const orderId = order._id.toString().toLowerCase();
                    const customer = (order.user ? order.user.email : 'Bilinmeyen').toLowerCase();
                    const products = order.products ? order.products.map(item => 
                        (item.product && item.product.isim) ? item.product.isim : 'Silinmiş Ürün'
                    ).join(' ').toLowerCase() : '';
                    
                    return orderId.includes(searchTerm) || 
                           customer.includes(searchTerm) || 
                           products.includes(searchTerm);
                });
                displayOrders();
                return;
            }
            
            // Normal filtreleme (arama terimi yoksa)
            const rows = document.querySelectorAll('#ordersTableBody tr');
            
            rows.forEach(row => {
                if (row.cells.length < 7) return; // Skip empty rows
                
                const status = row.cells[4].textContent.trim();
                const orderId = row.cells[0].textContent.toLowerCase();
                const customer = row.cells[1].textContent.toLowerCase();
                const products = row.cells[2].textContent.toLowerCase();
                
                let showRow = true;
                
                // Status filter
                if (statusFilter && !status.includes(statusFilter.toLowerCase())) {
                    showRow = false;
                }
                
                // Search filter
                if (searchTerm && !orderId.includes(searchTerm) && !customer.includes(searchTerm) && !products.includes(searchTerm)) {
                    showRow = false;
                }
                
                // Date filter (simplified - you can enhance this)
                if (dateFilter) {
                    const orderDate = new Date(row.cells[5].textContent);
                    const now = new Date();
                    let dateMatch = false;
                    
                    switch(dateFilter) {
                        case 'today':
                            dateMatch = orderDate.toDateString() === now.toDateString();
                            break;
                        case 'week':
                            const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
                            dateMatch = orderDate >= weekAgo;
                            break;
                        case 'month':
                            const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
                            dateMatch = orderDate >= monthAgo;
                            break;
                    }
                    
                    if (!dateMatch) showRow = false;
                }
                
                row.style.display = showRow ? '' : 'none';
            });
        }

        // Initialize dashboard
        document.addEventListener('DOMContentLoaded', function() {
            showNotification('Admin paneline hoş geldiniz!', 'success');
            
            // Animate stat numbers
            animateNumbers();
            
            // Initialize orders filters
            document.getElementById('statusFilter').addEventListener('change', filterOrders);
            document.getElementById('dateFilter').addEventListener('change', filterOrders);
            document.getElementById('searchOrders').addEventListener('input', filterOrders);
            
            // Calculate order statistics
            calculateOrderStats();
        });

        function calculateOrderStats() {
            const rows = document.querySelectorAll('#ordersTableBody tr');
            let completedCount = 0;
            let totalRevenue = 0;
            
            rows.forEach(row => {
                if (row.cells.length < 7) return;
                
                const status = row.cells[4].textContent.trim();
                const amount = parseFloat(row.cells[3].textContent.replace('₺', '').replace(',', '').replace('.', ''));
                
                if (status === 'Teslim Edildi') {
                    completedCount++;
                    // Sadece teslim edilen siparişlerin gelirini hesapla
                    if (!isNaN(amount)) {
                        totalRevenue += amount;
                    }
                }
            });
            
            document.getElementById('completedCount').textContent = completedCount;
            document.getElementById('totalRevenue').textContent = '₺' + totalRevenue.toLocaleString('tr-TR');
        }

        function animateNumbers() {
            const numbers = document.querySelectorAll('.stat-number');
            numbers.forEach(number => {
                const target = parseInt(number.textContent);
                let current = 0;
                const increment = target / 50;
                const timer = setInterval(() => {
                    current += increment;
                    if (current >= target) {
                        number.textContent = target;
                        clearInterval(timer);
                    } else {
                        number.textContent = Math.floor(current);
                    }
                }, 30);
            });
        }

        // Message Management Functions

        // Load messages on page load
        document.addEventListener('DOMContentLoaded', function() {
            if (document.getElementById('messages')) {
                loadMessages();
                setupMessageFilters();
            }
        });

        function loadMessages() {
            fetch('/admin/messages')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        messages = data.messages;
                        filteredMessages = [...messages];
                        displayMessages();
                        updateMessageStats();
                    } else {
                        showNotification('Mesajlar yüklenirken hata oluştu!', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error loading messages:', error);
                    showNotification('Mesajlar yüklenirken hata oluştu!', 'error');
                });
        }

        function displayMessages() {
            const tbody = document.getElementById('messagesTableBody');
            if (!tbody) return;

            if (filteredMessages.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="6" class="text-center py-5" style="color: var(--text-muted);">
                            <div class="d-flex flex-column align-items-center">
                                <i class="bi bi-inbox" style="font-size: 3rem; margin-bottom: 1rem; opacity: 0.5;"></i>
                                <h6 class="mb-2">Henüz mesaj bulunmuyor</h6>
                                <small>Müşterilerden gelen mesajlar burada görünecek</small>
                            </div>
                        </td>
                    </tr>
                `;
                return;
            }

            tbody.innerHTML = filteredMessages.map(message => `
                <tr style="cursor: pointer;" onclick="viewMessage('${message._id}')" class="${!message.isRead ? 'table-warning' : ''}">
                    <td onclick="event.stopPropagation();">
                        <input type="checkbox" class="message-checkbox form-check-input" value="${message._id}" onchange="updateSelectAllCheckbox()">
                    </td>
                    <td>
                        <div class="d-flex align-items-center">
                            <div class="avatar me-2" style="width: 32px; height: 32px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 50%; display: flex; align-items: center; justify-content: center; color: white; font-weight: bold; font-size: 0.8rem;">
                                ${message.name.charAt(0).toUpperCase()}
                            </div>
                            <div>
                                <div style="font-weight: 600; color: var(--text-primary); font-size: 0.9rem;">${message.name}</div>
                                <small style="color: var(--text-muted); font-size: 0.75rem;">${message.email}</small>
                            </div>
                        </div>
                    </td>
                    <td>
                        <div style="font-weight: 600; color: var(--text-primary); font-size: 0.9rem;">${message.subject}</div>
                        <small style="color: var(--text-muted); font-size: 0.75rem;">${message.message.substring(0, 40)}${message.message.length > 40 ? '...' : ''}</small>
                    </td>
                    <td>
                        <small style="color: var(--text-muted); font-size: 0.75rem;">${new Date(message.createdAt).toLocaleDateString('tr-TR')}</small>
                    </td>
                    <td>
                        ${message.isRead ? 
                            '<span class="badge bg-success" style="font-size: 0.7rem;">Okunmuş</span>' : 
                            '<span class="badge bg-warning text-dark" style="font-size: 0.7rem;">Okunmamış</span>'
                        }
                    </td>
                    <td onclick="event.stopPropagation();">
                        <div class="btn-group btn-group-sm" role="group">
                            <button class="btn btn-outline-primary btn-sm" onclick="viewMessage('${message._id}')" title="Görüntüle" style="padding: 0.25rem 0.5rem;">
                                <i class="bi bi-eye" style="font-size: 0.8rem;"></i>
                            </button>
                            <button class="btn btn-outline-success btn-sm" onclick="replyToMessage('${message._id}')" title="Yanıtla" style="padding: 0.25rem 0.5rem;">
                                <i class="bi bi-reply" style="font-size: 0.8rem;"></i>
                            </button>
                            <button class="btn btn-outline-danger btn-sm" onclick="deleteMessage('${message._id}')" title="Sil" style="padding: 0.25rem 0.5rem;">
                                <i class="bi bi-trash" style="font-size: 0.8rem;"></i>
                            </button>
                        </div>
                    </td>
                </tr>
            `).join('');
        }

        function updateMessageStats() {
            const total = messages.length;
            const unread = messages.filter(m => !m.isRead).length;
            const replied = messages.filter(m => m.isReplied).length;
            const today = messages.filter(m => {
                const today = new Date();
                const messageDate = new Date(m.createdAt);
                return messageDate.toDateString() === today.toDateString();
            }).length;

            document.getElementById('totalMessages').textContent = total;
            document.getElementById('unreadMessages').textContent = unread;
            document.getElementById('repliedMessages').textContent = replied;
            document.getElementById('todayMessages').textContent = today;
        }

        function setupMessageFilters() {
            const statusFilter = document.getElementById('messageStatusFilter');
            const dateFilter = document.getElementById('messageDateFilter');
            const searchInput = document.getElementById('messageSearch');

            if (statusFilter) {
                statusFilter.addEventListener('change', filterMessages);
            }
            if (dateFilter) {
                dateFilter.addEventListener('change', filterMessages);
            }
            if (searchInput) {
                searchInput.addEventListener('input', filterMessages);
            }
        }

        function filterMessages() {
            const statusFilter = document.getElementById('messageStatusFilter').value;
            const dateFilter = document.getElementById('messageDateFilter').value;
            const searchTerm = document.getElementById('messageSearch').value.toLowerCase();

            filteredMessages = messages.filter(message => {
                // Status filter
                if (statusFilter === 'unread' && message.isRead) return false;
                if (statusFilter === 'read' && !message.isRead) return false;
                if (statusFilter === 'replied' && !message.isReplied) return false;

                // Date filter
                if (dateFilter) {
                    const messageDate = new Date(message.createdAt);
                    const now = new Date();
                    
                    if (dateFilter === 'today') {
                        if (messageDate.toDateString() !== now.toDateString()) return false;
                    } else if (dateFilter === 'week') {
                        const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
                        if (messageDate < weekAgo) return false;
                    } else if (dateFilter === 'month') {
                        const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
                        if (messageDate < monthAgo) return false;
                    }
                }

                // Search filter
                if (searchTerm) {
                    const searchableText = `${message.name} ${message.email} ${message.subject} ${message.message}`.toLowerCase();
                    if (!searchableText.includes(searchTerm)) return false;
                }

                return true;
            });

            displayMessages();
        }

        function viewMessage(messageId) {
            const message = messages.find(m => m._id === messageId);
            if (!message) return;

            // Mark as read
            if (!message.isRead) {
                markMessageAsRead(messageId);
            }

            const content = `
                <div style="background: var(--bg-glass); backdrop-filter: blur(10px); border-radius: 1.5rem; padding: 2rem; margin-bottom: 1.5rem; border: 1px solid var(--border);">
                    <h4 style="color: var(--text-primary); margin-bottom: 1.5rem; display: flex; align-items: center; gap: 0.5rem;">
                        <i class="bi bi-envelope"></i>
                        Mesaj Bilgileri
                    </h4>
                    
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1rem;">
                        <div style="background: var(--bg-tertiary); padding: 1rem; border-radius: 1rem; border: 1px solid var(--border);">
                            <h6 style="color: var(--text-primary); margin-bottom: 0.5rem;">Gönderen</h6>
                            <p style="color: var(--text-secondary); margin: 0; font-weight: 600;">${message.name}</p>
                        </div>
                        <div style="background: var(--bg-tertiary); padding: 1rem; border-radius: 1rem; border: 1px solid var(--border);">
                            <h6 style="color: var(--text-primary); margin-bottom: 0.5rem;">E-posta</h6>
                            <p style="color: var(--text-secondary); margin: 0;">${message.email}</p>
                        </div>
                        <div style="background: var(--bg-tertiary); padding: 1rem; border-radius: 1rem; border: 1px solid var(--border);">
                            <h6 style="color: var(--text-primary); margin-bottom: 0.5rem;">Tarih</h6>
                            <p style="color: var(--text-secondary); margin: 0;">${new Date(message.createdAt).toLocaleString('tr-TR')}</p>
                        </div>
                        <div style="background: var(--bg-tertiary); padding: 1rem; border-radius: 1rem; border: 1px solid var(--border);">
                            <h6 style="color: var(--text-primary); margin-bottom: 0.5rem;">Durum</h6>
                            <p style="color: var(--text-secondary); margin: 0;">
                                ${message.isRead ? '<span class="badge bg-success">Okunmuş</span>' : '<span class="badge bg-warning text-dark">Okunmamış</span>'}
                            </p>
                        </div>
                    </div>
                </div>

                <div style="background: var(--bg-glass); backdrop-filter: blur(10px); border-radius: 1.5rem; padding: 2rem; margin-bottom: 1.5rem; border: 1px solid var(--border);">
                    <h4 style="color: var(--text-primary); margin-bottom: 1.5rem; display: flex; align-items: center; gap: 0.5rem;">
                        <i class="bi bi-chat-text"></i>
                        Mesaj İçeriği
                    </h4>
                    
                    <div style="background: var(--bg-tertiary); padding: 1.5rem; border-radius: 1rem; border: 1px solid var(--border);">
                        <h5 style="color: var(--text-primary); margin-bottom: 1rem;">${message.subject}</h5>
                        <p style="color: var(--text-secondary); line-height: 1.6; white-space: pre-wrap;">${message.message}</p>
                    </div>
                </div>

                <div style="display: flex; gap: 1rem; justify-content: flex-end;">
                    <button type="button" onclick="closeMessageDetailModal()" style="background: var(--bg-tertiary); color: var(--text-primary); border: 1px solid var(--border); padding: 0.75rem 1.5rem; border-radius: 0.75rem; font-weight: 600; cursor: pointer; transition: all 0.3s ease;">
                        <i class="bi bi-x-circle"></i>
                        Kapat
                    </button>
                    <button type="button" onclick="replyToMessage('${message._id}')" style="background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%); color: white; border: none; padding: 0.75rem 1.5rem; border-radius: 0.75rem; font-weight: 600; cursor: pointer; transition: all 0.3s ease; display: flex; align-items: center; gap: 0.5rem;">
                        <i class="bi bi-reply"></i>
                        Yanıtla
                    </button>
                </div>
            `;

            document.getElementById('messageDetailContent').innerHTML = content;
            showMessageDetailModal();
        }

        function showMessageDetailModal() {
            document.getElementById('messageDetailModal').style.display = 'flex';
        }

        function closeMessageDetailModal() {
            document.getElementById('messageDetailModal').style.display = 'none';
        }

        // User Detail Modal Functions
        function showUserDetailModal() {
            document.getElementById('userDetailModal').style.display = 'flex';
        }

        function closeUserDetailModal() {
            document.getElementById('userDetailModal').style.display = 'none';
        }

        function populateUserDetailModal(user, orders) {
            const content = document.getElementById('userDetailContent');
            
            // Tarih formatı için yardımcı fonksiyon
            const formatDate = (date) => {
                if (!date) return 'Bilinmiyor';
                const d = new Date(date);
                return d.toLocaleDateString('tr-TR', {
                    day: '2-digit',
                    month: '2-digit',
                    year: 'numeric',
                    timeZone: 'Europe/Istanbul'
                });
            };

            const formatTime = (date) => {
                if (!date) return 'Bilinmiyor';
                const d = new Date(date);
                return d.toLocaleTimeString('tr-TR', {
                    hour: '2-digit',
                    minute: '2-digit',
                    second: '2-digit',
                    timeZone: 'Europe/Istanbul'
                });
            };

            content.innerHTML = `
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 2rem; margin-bottom: 2rem;">
                    <!-- Kullanıcı Bilgileri -->
                    <div style="background: linear-gradient(135deg, var(--bg-tertiary), var(--bg-secondary)); padding: 1.5rem; border-radius: 1rem; border: 1px solid var(--border);">
                        <h4 style="color: var(--text-primary); margin-bottom: 1rem; display: flex; align-items: center; gap: 0.5rem;">
                            <i class="bi bi-person-circle" style="font-size: 1.2rem; color: var(--primary);"></i>
                            Kullanıcı Bilgileri
                        </h4>
                        
                        <div style="display: flex; align-items: center; gap: 1rem; margin-bottom: 1.5rem;">
                            <div style="width: 60px; height: 60px; border-radius: 50%; background: linear-gradient(135deg, var(--primary), #6366f1); display: flex; align-items: center; justify-content: center; color: white; font-weight: 700; font-size: 1.5rem;">
                                ${(user.firstName ? user.firstName.charAt(0) : user.email.charAt(0)).toUpperCase()}
                            </div>
                            <div>
                                <h5 style="color: var(--text-primary); margin: 0; font-size: 1.2rem;">
                                    ${user.firstName && user.lastName ? `${user.firstName} ${user.lastName}` : user.email}
                                </h5>
                                <p style="color: var(--text-muted); margin: 0.25rem 0 0 0; font-size: 0.9rem;">
                                    ${user.email}
                                </p>
                            </div>
                        </div>

                        <div style="display: grid; gap: 1rem;">
                            <div style="display: flex; justify-content: space-between; align-items: center; padding: 0.75rem; background: var(--bg-card); border-radius: 0.5rem; border: 1px solid var(--border);">
                                <span style="color: var(--text-muted); font-weight: 500;">Telefon:</span>
                                <span style="color: var(--text-primary); font-weight: 600;">${user.phone || 'Belirtilmemiş'}</span>
                            </div>
                            
                            <div style="display: flex; justify-content: space-between; align-items: center; padding: 0.75rem; background: var(--bg-card); border-radius: 0.5rem; border: 1px solid var(--border);">
                                <span style="color: var(--text-muted); font-weight: 500;">Durum:</span>
                                <span class="status-badge status-${user.isVerified ? 'active' : 'inactive'}" style="
                                    padding: 0.5rem 1rem; 
                                    border-radius: 2rem; 
                                    font-size: 0.875rem; 
                                    font-weight: 600; 
                                    text-transform: capitalize;
                                    display: inline-block;
                                    background: linear-gradient(135deg, ${user.isVerified ? '#10b981, #059669' : '#f59e0b, #d97706'}); 
                                    color: white; 
                                    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
                                ">
                                    <i class="bi ${user.isVerified ? 'bi-check-circle' : 'bi-clock'}" style="margin-right: 0.5rem;"></i>
                                    ${user.isVerified ? 'Doğrulanmış' : 'Beklemede'}
                                </span>
                            </div>
                            
                            <div style="display: flex; justify-content: space-between; align-items: center; padding: 0.75rem; background: var(--bg-card); border-radius: 0.5rem; border: 1px solid var(--border);">
                                <span style="color: var(--text-muted); font-weight: 500;">Kayıt Tarihi:</span>
                                <span style="color: var(--text-primary); font-weight: 600;">${formatDate(user.createdAt)}</span>
                            </div>
                            
                            <div style="display: flex; justify-content: space-between; align-items: center; padding: 0.75rem; background: var(--bg-card); border-radius: 0.5rem; border: 1px solid var(--border);">
                                <span style="color: var(--text-muted); font-weight: 500;">Kayıt Saati:</span>
                                <span style="color: var(--text-primary); font-weight: 600;">${formatTime(user.createdAt)}</span>
                            </div>
                        </div>
                    </div>

                    <!-- Adres Bilgileri -->
                    <div style="background: linear-gradient(135deg, var(--bg-tertiary), var(--bg-secondary)); padding: 1.5rem; border-radius: 1rem; border: 1px solid var(--border);">
                        <h4 style="color: var(--text-primary); margin-bottom: 1rem; display: flex; align-items: center; gap: 0.5rem;">
                            <i class="bi bi-geo-alt" style="font-size: 1.2rem; color: var(--primary);"></i>
                            Adres Bilgileri
                        </h4>
                        
                        <div style="padding: 1rem; background: var(--bg-card); border-radius: 0.5rem; border: 1px solid var(--border); min-height: 120px;">
                            ${user.address ? `
                                <p style="color: var(--text-primary); margin: 0; line-height: 1.6; white-space: pre-line;">${user.address}</p>
                            ` : `
                                <p style="color: var(--text-muted); margin: 0; font-style: italic;">Adres bilgisi belirtilmemiş</p>
                            `}
                        </div>
                    </div>
                </div>

                <!-- Sipariş Geçmişi -->
                <div style="background: linear-gradient(135deg, var(--bg-tertiary), var(--bg-secondary)); padding: 1.5rem; border-radius: 1rem; border: 1px solid var(--border);">
                    <h4 style="color: var(--text-primary); margin-bottom: 1rem; display: flex; align-items: center; gap: 0.5rem;">
                        <i class="bi bi-cart-check" style="font-size: 1.2rem; color: var(--primary);"></i>
                        Sipariş Geçmişi (${orders ? orders.length : 0} sipariş)
                    </h4>
                    
                    ${orders && orders.length > 0 ? `
                        <div style="max-height: 300px; overflow-y: auto;">
                            ${orders.map((order, index) => `
                                <div style="display: flex; justify-content: space-between; align-items: center; padding: 1rem; background: var(--bg-card); border-radius: 0.5rem; border: 1px solid var(--border); margin-bottom: 0.5rem;">
                                    <div>
                                        <h6 style="color: var(--text-primary); margin: 0; font-size: 1rem;">Sipariş #${index + 1}</h6>
                                        <p style="color: var(--text-muted); margin: 0.25rem 0 0 0; font-size: 0.875rem;">
                                            ${formatDate(order.createdAt)} - ${formatTime(order.createdAt)}
                                        </p>
                                    </div>
                                    <div style="text-align: right;">
                                        <span style="color: var(--success); font-weight: 600; font-size: 1.1rem;">₺${order.total}</span>
                                        <br>
                                        <span class="status-badge status-${order.status.toLowerCase().replace(/\s+/g, '-')}" style="
                                            padding: 0.25rem 0.75rem; 
                                            border-radius: 1rem; 
                                            font-size: 0.75rem; 
                                            font-weight: 600; 
                                            text-transform: capitalize;
                                            display: inline-block;
                                            background: linear-gradient(135deg, ${getStatusColor(order.status)}); 
                                            color: white; 
                                            margin-top: 0.25rem;
                                        ">
                                            ${order.status}
                                        </span>
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                    ` : `
                        <div style="text-align: center; padding: 2rem; color: var(--text-muted);">
                            <i class="bi bi-cart-x" style="font-size: 3rem; margin-bottom: 1rem; display: block;"></i>
                            <p style="margin: 0; font-style: italic;">Henüz sipariş bulunmuyor</p>
                        </div>
                    `}
                </div>

                <!-- Modal Actions -->
                <div style="display: flex; gap: 1rem; justify-content: flex-end; margin-top: 2rem; padding-top: 2rem; border-top: 1px solid var(--border);">
                    <button onclick="toggleUserStatus('${user._id}', ${user.isVerified})" style="
                        padding: 0.75rem 1.5rem; 
                        background: linear-gradient(135deg, ${user.isVerified ? '#ef4444, #dc2626' : '#10b981, #059669'}); 
                        color: white; 
                        border: none; 
                        border-radius: 0.75rem; 
                        cursor: pointer; 
                        display: flex; 
                        align-items: center; 
                        gap: 0.5rem;
                        font-size: 0.875rem;
                        font-weight: 700;
                        transition: all 0.3s ease;
                        box-shadow: 0 4px 12px rgba(${user.isVerified ? '239, 68, 68' : '16, 185, 129'}, 0.3);
                    " onmouseover="this.style.transform='translateY(-2px) scale(1.05)'" onmouseout="this.style.transform='translateY(0) scale(1)'">
                        <i class="bi ${user.isVerified ? 'bi-person-x' : 'bi-person-check'}" style="font-size: 1rem;"></i>
                        ${user.isVerified ? 'Pasif Yap' : 'Aktif Yap'}
                    </button>
                    <button onclick="closeUserDetailModal()" style="
                        padding: 0.75rem 1.5rem; 
                        background: var(--bg-tertiary); 
                        color: var(--text-primary); 
                        border: 1px solid var(--border); 
                        border-radius: 0.75rem; 
                        cursor: pointer; 
                        display: flex; 
                        align-items: center; 
                        gap: 0.5rem;
                        font-size: 0.875rem;
                        font-weight: 700;
                        transition: all 0.3s ease;
                    " onmouseover="this.style.transform='translateY(-2px) scale(1.05)'" onmouseout="this.style.transform='translateY(0) scale(1)'">
                        <i class="bi bi-x-circle" style="font-size: 1rem;"></i>
                        Kapat
                    </button>
                </div>
            `;
        }

        function markMessageAsRead(messageId) {
            fetch(`/admin/mark-message-read/${messageId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const message = messages.find(m => m._id === messageId);
                    if (message) {
                        message.isRead = true;
                        updateMessageStats();
                        displayMessages();
                    }
                }
            })
            .catch(error => {
                console.error('Error marking message as read:', error);
            });
        }

        function replyToMessage(messageId) {
            const message = messages.find(m => m._id === messageId);
            if (!message) return;

            // Create reply email
            const subject = `Re: ${message.subject}`;
            const replyEmail = `mailto:${message.email}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(`\n\n--- Orijinal Mesaj ---\n${message.message}`)}`;
            
            window.open(replyEmail, '_blank');
            showNotification('E-posta uygulamanız açılıyor...', 'info');
        }

        function deleteMessage(messageId) {
            if (!confirm('Bu mesajı silmek istediğinizden emin misiniz?')) return;

            fetch(`/admin/delete-message/${messageId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    messages = messages.filter(m => m._id !== messageId);
                    filteredMessages = filteredMessages.filter(m => m._id !== messageId);
                    displayMessages();
                    updateMessageStats();
                    showNotification('Mesaj silindi!', 'success');
                } else {
                    showNotification('Mesaj silinirken hata oluştu!', 'error');
                }
            })
            .catch(error => {
                console.error('Error deleting message:', error);
                showNotification('Mesaj silinirken hata oluştu!', 'error');
            });
        }

        function refreshMessages() {
            showNotification('Mesajlar yenileniyor...', 'info');
            loadMessages();
        }

        function addTestMessages() {
            if (!confirm('Test mesajları eklemek istediğinizden emin misiniz?')) return;

            showNotification('Test mesajları ekleniyor...', 'info');

            const testMessages = [
                {
                    name: 'Ahmet Yılmaz',
                    email: 'ahmet.yilmaz@email.com',
                    subject: 'Ürün Hakkında Soru',
                    message: 'Merhaba, Silver Wyandotte tavuklarınız hakkında bilgi almak istiyorum. Hangi yaşta satışa sunuyorsunuz?',
                    isRead: false
                },
                {
                    name: 'Fatma Demir',
                    email: 'fatma.demir@email.com',
                    subject: 'Sipariş Durumu',
                    message: 'Geçen hafta verdiğim siparişimin durumu nedir? Ne zaman teslim edilecek?',
                    isRead: true
                },
                {
                    name: 'Mehmet Kaya',
                    email: 'mehmet.kaya@email.com',
                    subject: 'Fiyat Bilgisi',
                    message: 'Horoz fiyatlarınız güncel mi? Toplu alım yapmak istiyorum, indirim var mı?',
                    isRead: false
                },
                {
                    name: 'Ayşe Özkan',
                    email: 'ayse.ozkan@email.com',
                    subject: 'Teslimat Sorunu',
                    message: 'Siparişim geç teslim edildi. Bu durumda ne yapabilirim?',
                    isRead: true
                },
                {
                    name: 'Ali Veli',
                    email: 'ali.veli@email.com',
                    subject: 'Yeni Ürün Önerisi',
                    message: 'Civciv satışı yapıyor musunuz? Ne zaman başlayacaksınız?',
                    isRead: false
                }
            ];

            // Her mesajı tek tek ekle
            let addedCount = 0;
            testMessages.forEach((msg, index) => {
                setTimeout(() => {
                    fetch('/admin/add-message', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(msg)
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            addedCount++;
                            if (addedCount === testMessages.length) {
                                showNotification(`${testMessages.length} test mesajı eklendi!`, 'success');
                                loadMessages(); // Mesajları yeniden yükle
                            }
                        }
                    })
                    .catch(error => {
                        console.error('Error adding test message:', error);
                    });
                }, index * 200); // Her mesaj arasında 200ms bekle
            });
        }

        function markAllAsRead() {
            if (!confirm('Tüm mesajları okundu olarak işaretlemek istediğinizden emin misiniz?')) return;

            fetch('/admin/mark-all-messages-read', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    messages.forEach(m => m.isRead = true);
                    filteredMessages.forEach(m => m.isRead = true);
                    displayMessages();
                    updateMessageStats();
                    showNotification('Tüm mesajlar okundu olarak işaretlendi!', 'success');
                } else {
                    showNotification('Mesajlar işaretlenirken hata oluştu!', 'error');
                }
            })
            .catch(error => {
                console.error('Error marking all messages as read:', error);
                showNotification('Mesajlar işaretlenirken hata oluştu!', 'error');
            });
        }

        function deleteSelectedMessages() {
            const selectedMessages = Array.from(document.querySelectorAll('.message-checkbox:checked')).map(cb => cb.value);
            
            if (selectedMessages.length === 0) {
                showNotification('Lütfen silmek istediğiniz mesajları seçin!', 'warning');
                return;
            }

            if (!confirm(`${selectedMessages.length} mesajı silmek istediğinizden emin misiniz?`)) return;

            fetch('/admin/delete-messages', {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ messageIds: selectedMessages })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    messages = messages.filter(m => !selectedMessages.includes(m._id));
                    filteredMessages = filteredMessages.filter(m => !selectedMessages.includes(m._id));
                    displayMessages();
                    updateMessageStats();
                    showNotification(`${selectedMessages.length} mesaj silindi!`, 'success');
                } else {
                    showNotification('Mesajlar silinirken hata oluştu!', 'error');
                }
            })
            .catch(error => {
                console.error('Error deleting messages:', error);
                showNotification('Mesajlar silinirken hata oluştu!', 'error');
            });
        }

        function toggleSelectAllMessages() {
            const selectAll1 = document.getElementById('selectAllMessages');
            const selectAll2 = document.getElementById('selectAllMessages2');
            const checkboxes = document.querySelectorAll('.message-checkbox');
            
            const isChecked = selectAll1 ? selectAll1.checked : selectAll2.checked;
            
            checkboxes.forEach(cb => {
                cb.checked = isChecked;
            });
            
            // Sync both select all checkboxes
            if (selectAll1 && selectAll2) {
                selectAll1.checked = isChecked;
                selectAll2.checked = isChecked;
            }
        }

        function updateSelectAllCheckbox() {
            const selectAll1 = document.getElementById('selectAllMessages');
            const selectAll2 = document.getElementById('selectAllMessages2');
            const checkboxes = document.querySelectorAll('.message-checkbox');
            const checkedBoxes = document.querySelectorAll('.message-checkbox:checked');
            
            const allChecked = checkboxes.length === checkedBoxes.length;
            const someChecked = checkedBoxes.length > 0;
            
            if (selectAll1) {
                selectAll1.checked = allChecked;
                selectAll1.indeterminate = someChecked && !allChecked;
            }
            if (selectAll2) {
                selectAll2.checked = allChecked;
                selectAll2.indeterminate = someChecked && !allChecked;
            }
        }

        // Users Management Variables
        let users = [];
        let filteredUsers = [];

        // Users Management Functions
        function refreshUsers() {
            showNotification('Kullanıcılar yenileniyor...', 'info');
            
            fetch('/admin/users')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        users = data.users;
                        filteredUsers = [...users];
                        displayUsers();
                        updateUserStats();
                        showNotification('Kullanıcılar başarıyla yenilendi!', 'success');
                    } else {
                        showNotification('Kullanıcılar yüklenirken hata oluştu!', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error loading users:', error);
                    showNotification('Kullanıcılar yüklenirken hata oluştu!', 'error');
                });
        }

        function displayUsers() {
            const tbody = document.getElementById('usersTableBody');
            if (!tbody) return;
            
            tbody.innerHTML = '';
            
            
            if (filteredUsers.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="6" style="padding: 3rem; text-align: center; color: var(--text-muted);">
                            <i class="bi bi-people" style="font-size: 3rem; margin-bottom: 1rem; display: block;"></i>
                            Kullanıcı bulunamadı.
                        </td>
                    </tr>
                `;
                return;
            }
            
            filteredUsers.forEach((user, index) => {
                const userNumber = index + 1;
                const isActive = user.isVerified === true; // E-posta doğrulanmış kullanıcılar aktif
                
                // Tarih bilgisini kontrol et - Türkiye saat dilimi
                // Kayıt tarihini hesapla - güvenli fallback
                let registrationDate;
                if (user.createdAt) {
                    registrationDate = new Date(user.createdAt);
                } else if (user._id) {
                    // ObjectId'den tarih çıkar
                    registrationDate = new Date(parseInt(user._id.toString().substring(0, 8), 16) * 1000);
                } else {
                    registrationDate = new Date();
                }
                const today = new Date();
                const isNewToday = registrationDate.toDateString() === today.toDateString();
                
                const row = document.createElement('tr');
                row.style.cssText = 'border-bottom: 1px solid var(--border); transition: all 0.3s ease; background: var(--bg-card);';
                row.innerHTML = `
                    <td style="padding: 1rem; color: var(--text-primary); font-weight: 600;">
                        <div style="display: flex; align-items: center; gap: 1rem;">
                            <div style="width: 40px; height: 40px; border-radius: 50%; background: linear-gradient(135deg, var(--primary), #6366f1); display: flex; align-items: center; justify-content: center; color: white; font-weight: 700; font-size: 1.1rem;">
                                ${(user.firstName ? user.firstName.charAt(0) : user.email.charAt(0)).toUpperCase()}
                            </div>
                            <div style="display: flex; flex-direction: column; gap: 0.25rem;">
                                <span style="font-size: 1rem; font-weight: 600;">${user.firstName && user.lastName ? `${user.firstName} ${user.lastName}` : user.email}</span>
                                <span style="font-size: 0.75rem; color: var(--text-muted);">#${userNumber.toString().padStart(4, '0')}</span>
                            </div>
                        </div>
                    </td>
                    <td style="padding: 1rem; color: var(--text-primary);">
                        <div style="display: flex; flex-direction: column; gap: 0.25rem;">
                            <span style="font-weight: 500;">${user.email}</span>
                            ${user.phone ? `<span style="font-size: 0.75rem; color: var(--text-muted);">${user.phone}</span>` : ''}
                            ${user.address ? `<span style="font-size: 0.75rem; color: var(--text-muted); font-style: italic;">${user.address}</span>` : ''}
                        </div>
                    </td>
                    <td style="padding: 1rem; color: var(--text-primary);">
                        <div style="display: flex; flex-direction: column; gap: 0.5rem; align-items: flex-start;">
                            <div style="display: flex; flex-direction: column; gap: 0.5rem; align-items: flex-start;">
                                <div style="display: flex; flex-direction: column; gap: 0.25rem;">
                                    <span style="font-size: 1rem; font-weight: 700; color: var(--text-primary);">
                                        ${registrationDate.toLocaleDateString('tr-TR', {
                                            day: '2-digit',
                                            month: '2-digit', 
                                            year: 'numeric',
                                            timeZone: 'Europe/Istanbul'
                                        })}
                                    </span>
                                    <span style="font-size: 0.85rem; color: var(--text-muted); font-weight: 500;">
                                        ${registrationDate.toLocaleDateString('tr-TR', {
                                            weekday: 'long',
                                            timeZone: 'Europe/Istanbul'
                                        })}
                                    </span>
                                </div>
                                <div style="display: flex; align-items: center; gap: 0.5rem; background: linear-gradient(135deg, var(--bg-tertiary), var(--bg-secondary)); padding: 0.5rem 0.75rem; border-radius: 0.5rem; border: 1px solid var(--border);">
                                    <i class="bi bi-clock" style="font-size: 0.8rem; color: var(--primary);"></i>
                                    <span style="font-size: 0.9rem; color: var(--text-primary); font-weight: 600;">
                                        ${registrationDate.toLocaleTimeString('tr-TR', {
                                            hour: '2-digit', 
                                            minute: '2-digit',
                                            second: '2-digit',
                                            timeZone: 'Europe/Istanbul'
                                        })}
                                    </span>
                                </div>
                            </div>
                        </div>
                    </td>
                    <td style="padding: 1rem;">
                        <div style="display: flex; flex-direction: column; gap: 0.25rem; align-items: flex-start;">
                            <span class="status-badge status-${isActive ? 'active' : 'inactive'}" style="
                                padding: 0.5rem 1rem; 
                                border-radius: 2rem; 
                                font-size: 0.875rem; 
                                font-weight: 600; 
                                text-transform: capitalize;
                                display: inline-block;
                                transition: all 0.3s ease;
                                cursor: pointer;
                                position: relative;
                                background: linear-gradient(135deg, ${isActive ? '#10b981, #059669' : '#f59e0b, #d97706'}); 
                                color: white; 
                                box-shadow: 0 2px 4px rgba(0,0,0,0.2);
                            " onmouseover="this.style.transform='scale(1.05)'" onmouseout="this.style.transform='scale(1)'">
                                <i class="bi ${isActive ? 'bi-check-circle' : 'bi-clock'}" style="margin-right: 0.5rem;"></i>
                                ${isActive ? 'Doğrulanmış' : 'Beklemede'}
                            </span>
                            ${isNewToday ? '<span style="font-size: 0.75rem; color: var(--success); font-weight: 600;">Yeni!</span>' : ''}
                        </div>
                    </td>
                    <td style="padding: 1rem; color: var(--text-primary); font-weight: 600;">
                        <div style="display: flex; flex-direction: column; gap: 0.25rem; align-items: flex-start;">
                            <span style="font-size: 1.1rem; color: var(--primary);">${user.orderCount || 0}</span>
                            <span style="font-size: 0.75rem; color: var(--text-muted);">Sipariş</span>
                        </div>
                    </td>
                    <td style="padding: 1rem;">
                        <div class="action-buttons" style="display: flex; justify-content: center; align-items: center; gap: 0.75rem; flex-wrap: wrap;">
                            <button class="action-btn view-btn" onclick="viewUser('${user._id}')" style="
                                padding: 0.875rem 1.5rem; 
                                background: linear-gradient(135deg, #3b82f6, #2563eb); 
                                color: white; 
                                border: none; 
                                border-radius: 0.875rem; 
                                cursor: pointer; 
                                display: flex; 
                                align-items: center; 
                                gap: 0.625rem;
                                font-size: 0.9rem;
                                font-weight: 700;
                                transition: all 0.3s ease;
                                box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
                                position: relative;
                                overflow: hidden;
                                min-width: 120px;
                                justify-content: center;
                            " onmouseover="this.style.transform='translateY(-3px) scale(1.05)'; this.style.boxShadow='0 8px 20px rgba(59, 130, 246, 0.4)'; this.style.background='linear-gradient(135deg, #2563eb, #1d4ed8)'" onmouseout="this.style.transform='translateY(0) scale(1)'; this.style.boxShadow='0 4px 12px rgba(59, 130, 246, 0.3)'; this.style.background='linear-gradient(135deg, #3b82f6, #2563eb)'">
                                <i class="bi bi-eye-fill" style="font-size: 1.1rem;"></i>
                                <span>Detay</span>
                            </button>
                            <button class="action-btn toggle-btn" onclick="toggleUserStatus('${user._id}', ${isActive})" style="
                                padding: 0.875rem 1.5rem; 
                                background: linear-gradient(135deg, ${isActive ? '#ef4444, #dc2626' : '#10b981, #059669'}); 
                                color: white; 
                                border: none; 
                                border-radius: 0.875rem; 
                                cursor: pointer; 
                                display: flex; 
                                align-items: center; 
                                gap: 0.625rem;
                                font-size: 0.9rem;
                                font-weight: 700;
                                transition: all 0.3s ease;
                                box-shadow: 0 4px 12px rgba(${isActive ? '239, 68, 68' : '16, 185, 129'}, 0.3);
                                position: relative;
                                overflow: hidden;
                                min-width: 140px;
                                justify-content: center;
                            " onmouseover="this.style.transform='translateY(-3px) scale(1.05)'; this.style.boxShadow='0 8px 20px rgba(${isActive ? '239, 68, 68' : '16, 185, 129'}, 0.4)'; this.style.background='linear-gradient(135deg, ${isActive ? '#dc2626, #b91c1c' : '#059669, #047857'})'" onmouseout="this.style.transform='translateY(0) scale(1)'; this.style.boxShadow='0 4px 12px rgba(${isActive ? '239, 68, 68' : '16, 185, 129'}, 0.3)'; this.style.background='linear-gradient(135deg, ${isActive ? '#ef4444, #dc2626' : '#10b981, #059669'})'">
                                <i class="bi ${isActive ? 'bi-person-x' : 'bi-person-check'}" style="font-size: 1.1rem;"></i>
                                <span>${isActive ? 'Pasif Yap' : 'Aktif Yap'}</span>
                            </button>
                        </div>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        function updateUserStats() {
            const totalUsers = users.length;
            const activeUsers = users.filter(user => user.isVerified === true).length;
            const inactiveUsers = users.filter(user => user.isVerified !== true).length;
            
            const today = new Date();
            const newUsersToday = users.filter(user => {
                // Güvenli tarih hesaplama
                let userDate;
                if (user.createdAt) {
                    userDate = new Date(user.createdAt);
                } else if (user._id) {
                    // ObjectId'den tarih çıkar
                    userDate = new Date(parseInt(user._id.toString().substring(0, 8), 16) * 1000);
                } else {
                    return false;
                }
                
                // Türkiye saat diliminde karşılaştır
                const userDateTR = new Date(userDate.toLocaleString('en-US', {timeZone: 'Europe/Istanbul'}));
                const todayTR = new Date(today.toLocaleString('en-US', {timeZone: 'Europe/Istanbul'}));
                return userDateTR.toDateString() === todayTR.toDateString();
            }).length;
            
            const totalUsersElement = document.getElementById('totalUsers');
            const activeUsersElement = document.getElementById('activeUsers');
            const inactiveUsersElement = document.getElementById('inactiveUsers');
            const newUsersTodayElement = document.getElementById('newUsersToday');
            
            if (totalUsersElement) {
                totalUsersElement.textContent = totalUsers;
            }
            if (activeUsersElement) {
                activeUsersElement.textContent = activeUsers;
            }
            if (inactiveUsersElement) {
                inactiveUsersElement.textContent = inactiveUsers;
            }
            if (newUsersTodayElement) {
                newUsersTodayElement.textContent = newUsersToday;
            }
        }

        function filterUsers() {
            const statusFilter = document.getElementById('userStatusFilter').value;
            const dateFilter = document.getElementById('userDateFilter').value;
            const searchTerm = document.getElementById('searchUsers').value.toLowerCase();
            
            filteredUsers = users.filter(user => {
                let showUser = true;
                
                // Status filter
                if (statusFilter) {
                    const isActive = user.isVerified === true;
                    if (statusFilter === 'active' && !isActive) showUser = false;
                    if (statusFilter === 'inactive' && isActive) showUser = false;
                }
                
                // Date filter - Türkiye saat dilimi - güvenli fallback
                if (dateFilter) {
                    let userDate;
                    if (user.createdAt) {
                        userDate = new Date(user.createdAt);
                    } else if (user._id) {
                        // ObjectId'den tarih çıkar
                        userDate = new Date(parseInt(user._id.toString().substring(0, 8), 16) * 1000);
                    }
                    
                    if (userDate) {
                        const today = new Date();
                        let dateMatch = false;
                        
                        // Türkiye saat diliminde karşılaştır
                        const userDateTR = new Date(userDate.toLocaleString('en-US', {timeZone: 'Europe/Istanbul'}));
                        const todayTR = new Date(today.toLocaleString('en-US', {timeZone: 'Europe/Istanbul'}));
                    
                    switch(dateFilter) {
                        case 'today':
                            dateMatch = userDateTR.toDateString() === todayTR.toDateString();
                            break;
                        case 'week':
                            const weekAgo = new Date(todayTR.getTime() - 7 * 24 * 60 * 60 * 1000);
                            dateMatch = userDateTR >= weekAgo;
                            break;
                        case 'month':
                            const monthAgo = new Date(todayTR.getTime() - 30 * 24 * 60 * 60 * 1000);
                            dateMatch = userDateTR >= monthAgo;
                            break;
                    }
                    
                    if (!dateMatch) showUser = false;
                    }
                }
                
                // Search filter
                if (searchTerm) {
                    const searchableText = `${user.email} ${user.phone || ''} ${user.firstName || ''} ${user.lastName || ''}`.toLowerCase();
                    if (!searchableText.includes(searchTerm)) showUser = false;
                }
                
                return showUser;
            });
            
            displayUsers();
        }

        function viewUser(userId) {
            console.log('viewUser called with userId:', userId);
            showNotification('Kullanıcı detayı yükleniyor...', 'info');
            
            fetch(`/admin/users/${userId}`)
                .then(response => {
                    console.log('Response status:', response.status);
                    return response.json();
                })
                .then(data => {
                    console.log('Response data:', data);
                    if (data.success) {
                        populateUserDetailModal(data.user, data.orders);
                        showUserDetailModal();
                    } else {
                        showNotification(data.message || 'Kullanıcı bilgileri alınamadı!', 'error');
                    }
                })
                .catch(error => {
                    console.error('Kullanıcı detayı yüklenirken hata:', error);
                    showNotification('Kullanıcı detayı yüklenirken hata oluştu!', 'error');
                });
        }

        function toggleUserStatus(userId, currentStatus) {
            console.log('toggleUserStatus called with userId:', userId, 'currentStatus:', currentStatus);
            const newStatus = !currentStatus;
            const action = newStatus ? 'aktif' : 'pasif';
            
            if (confirm(`Kullanıcıyı ${action} yapmak istediğinizden emin misiniz?`)) {
                showNotification('Kullanıcı durumu güncelleniyor...', 'info');
                
                fetch('/admin/users/toggle-status', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        userId: userId,
                        isVerified: newStatus
                    })
                })
                .then(response => {
                    console.log('Toggle response status:', response.status);
                    return response.json();
                })
                .then(data => {
                    console.log('Toggle response data:', data);
                    if (data.success) {
                        showNotification(`Kullanıcı ${action} yapıldı!`, 'success');
                        refreshUsers();
                    } else {
                        showNotification(data.message || 'Durum güncellenirken hata oluştu!', 'error');
                    }
                })
                .catch(error => {
                    console.error('Kullanıcı durumu güncellenirken hata:', error);
                    showNotification('Kullanıcı durumu güncellenirken hata oluştu!', 'error');
                });
            }
        }

        // Event listeners for users
        document.addEventListener('DOMContentLoaded', function() {
            // Users tab event listeners
            const userStatusFilter = document.getElementById('userStatusFilter');
            const userDateFilter = document.getElementById('userDateFilter');
            const searchUsers = document.getElementById('searchUsers');
            
            if (userStatusFilter) {
                userStatusFilter.addEventListener('change', filterUsers);
            }
            if (userDateFilter) {
                userDateFilter.addEventListener('change', filterUsers);
            }
            if (searchUsers) {
                searchUsers.addEventListener('input', filterUsers);
            }
        });
    </script>
</body>
</html>
